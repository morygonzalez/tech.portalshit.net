---
id: 48
title: TDD BootCamp福岡に行った
category: TDD
layout: post
---

TDD BootCampに行ってみた。

### 参加しようと思ったわけ

いま勤めている会社にはテストがない。いや、テストはある。テストコードがない。エクセルにテスト項目をたくさん書き出していって手動でテストする。人力で三人くらいが夜なべしてテストする。これはどうしたっておかしい。開発前に要件定義書、設計書を書いて開発し、開発が終わったらエクセルで長大なテストシートを作成し、手動テストを行う。そしてバグや思わぬ不具合が発見されるとプログラムに改修を加える。ときにはテストケースを変更することすらある。欠陥や不都合が発見される度に連動して設計書にも修正・変更が加えられ、Do Repeat Yourselfな感じになってる。毎日毎日ドキュメント作成などの開発以外のタスクに時間を割かれるので新しい技術に触れる機会がないし、遅くまで残って仕事してから帰宅するので趣味プログラミングで知見を広めることもできない。この状況をなんとかしたいと思っていて、今風の開発手法を身につけたいと思ってTDD BootCampに参加した。

### 感想

TDDで有名なt\_wadaさんのプレゼンテーションは鮮やかで、すごく印象に残った。心に響いた部分を以下箇条書き。

- 現代ソフトウェア開発の三本柱
  - バージョン管理
    - テスティングや自動化よりも重要
  - テスティング
  - 自動化
    - デプロイなど単調な作業の自動化し、浮いた時間を設計や顧客との対話に使う
- xUnit
  - xUnitの登場により、書き方・語彙・文法が言語の垣根を越えて共有され、キャズムを超えた。
    - テスト記述方法の共通化
    - テスト実行方法の共通化
  - テストを書いた人でなくても同じようにテストを実行できるようになった
    - 誰でも実行できるということは、コンピューターでも実行可能
      - テストの自働化へ（ファイルの保存時、VCSへのコミット時に自働テスト）
- 良いテスト
  - 自動化されている
  - 徹底している
  - 何度でも実行可能
  - 独立している
  - プロのコード
    - テストコードもプロダクトコードと同じ品質であることが求められる（リファクタリング、DRY原則の貫徹など）
- TDD三原則
  - 単体テストコードを書く前に製品コードを書いてはいけない
  - 適切に失敗する単体テストコードができるまで、次の単体テストコードを書いてはならない
  - 単体テストコードに対応する以上に製品コードを書かない
- なぜTDDをするのか
  - 自分が完璧ではないことがわかっているから
    - 最初から思い通りにコードを書けるほどに私たちは賢くない
    - 最初から思い通りに動作するほど対象は単純ではない
    - 素早く対象に近づき、フィードバックを得て方向修正をしながら開発を行う必要がある
- テストの目的は健康
  - 変化に対応できるのは健康体のコードだけ
  - 変化に対応できるのは健康体のチームだけ
    - 毎日残業する、毎日レッドブル飲んだりしていてはダメ
- TDDの導入効果
  - MSやIBMでTDD導入後、欠陥の割合が4割から9割削減された。
  - コード実装時間は15%から35%増加した。
    - しかし結果的にはバグが激減するので開発工数自体は減る。
- TDDは才能ではなくスキル
  - 練習すれば習得可能
  - 量は質に転化する
  - 写経しましょう！
    - PCにGitをインストールし、ページをキープできるブックスタンドを買って、ケント・ベック本をひたすら写経。ビルドを実行する度にコミットする。

いっぱい本を紹介してもらったので今度給料出たら『レガシー・コード改善ガイド』と『テスト駆動開発入門』を買おうと思った。

### TDDを導入するには

いかにして会社の上司を説得するかが重要だ。TDDは一見するとコード実装時間が延びるので会社では嫌われそうだ。またペアプログラミングも二人で交代交代にコードを書くので見た目の作業効率が悪化する。またプログラムによるテストが何を意味するのか分かってもらうのも大変だろう。品質保証のためのテストとTDDにおけるテストは分けて考える必要があるだろう。しかしTDDによりテストフェーズにおける手戻りが激減し、人もコードも健康的な開発環境が手に入るのではないかと思う。
