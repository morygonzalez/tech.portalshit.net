<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title>tech.portalshit.net</title>
  <link href="http://tech.portalshit.net/feed/atom.xml" rel="self" />
  <link href="http://tech.portalshit.net/" />
  <updated>2011-11-22T00:32:09+09:00</updated>
  <id>http://tech.portalshit.net/</id>
  <author>
    <name>森井ゴンザレス</name>
  </author>
  
  
  <entry>
    <title>RVMをやめてrbenvにした</title>
    <link href="/2011/11/15/i-am-new-with-rbenv" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/11/15/i-am-new-with-rbenv</id>
    <content type="html">&lt;p&gt;RVM、便利に使わせてもらっていたけど、Rubyの新しいのがリリースされるたびにいろいろアレだったので &lt;a href=&quot;%link%&quot; title=&quot;sstephenson/rbenv - GitHub&quot;&gt;rbenv&lt;/a&gt; を使ってみることにした。移行、しんどいかなと思ってたけど非常に簡単で大変よかった。&lt;/p&gt;

&lt;h3 id=&quot;rvm&quot;&gt;RVMもキモさ&lt;/h3&gt;

&lt;p&gt;RVMの悪いところはググればいろいろ出てくるけど、OSの &lt;code&gt;cd&lt;/code&gt; やRubyの &lt;code&gt;gem&lt;/code&gt; コマンドをシェルスクリプトで置き換えるとか、行儀が悪いところが問題らしい。個人的に気にくわなかったのがRVMがどんどんでかくなっていって、Rubyのビルドに必要なパッケージまで管理できるようになったところとか（.rvm以下に新しくシステムができるみたいな感じがキモかった）、パッケージインストール用のコマンドがhelpドキュメントでは &lt;code&gt;rvm package install&lt;/code&gt; なのに &lt;code&gt;rvm pkg install&lt;/code&gt; にいつの間にか変わっていて訳がわからないところとか、よくわからないシェルスクリプトがログイン時に実行されるところとか、 &lt;code&gt;rvmsudo&lt;/code&gt; っていうコマンドのキモさとかいろいろ。&lt;/p&gt;

&lt;h3 id=&quot;rbenv&quot;&gt;rbenv&lt;/h3&gt;

&lt;p&gt;rbenvはRubyのバージョンを切り替えるためのツールなのでインストールはやってくれないけど、ruby-buildというツールを別に入れることで、 &lt;code&gt;rbenv install 1.9.2-p290&lt;/code&gt; とかでRubyのインストールもこなしてくれるようになる。&lt;/p&gt;

&lt;p&gt;あまりRVMを使いこなしてたとはいえなかった自分にとってはrbenvくらいでちょうどいいような感じがする。gemsetとか使わんし。そんくらいだったBundler使うし。&lt;/p&gt;

&lt;p&gt;インストールは以下のページが参考になります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;%link%&quot; title=&quot;rbenv + ruby-buildのインストール方法 - 223 Software&quot;&gt;rbenv + ruby-buildのインストール方法 - 223 Software&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なおrbenvはRubyインストール時のconfigureオプションの指定方法が特殊です。直接は指定できないようなので以下のようにします。（homebrewでインストールしたreadlineとiconvのパスを指定する例）&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONFIGURE_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;--with-readline-dir=/usr/local --with-iconv-dir=/usr/local&amp;quot;&lt;/span&gt; rbenv install 1.9.2-p290
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;デフォルトのオプションなしのRubyだとearthquake.gemが動かなかったりjekyllが使えなかったりするので僕は↑のオプションを追加しました。よろしかったらお試し下さい。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Herokuを使うのをやめた</title>
    <link href="/2011/10/31/stopped-using-heroku" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/10/31/stopped-using-heroku</id>
    <content type="html">&lt;p&gt;LokkaをCMSに採用している &lt;a href=&quot;http://www.portalshit.net&quot;&gt;ポータルシット&lt;/a&gt; はHerokuで動かしてたんだけど、Lokkaをカスタマイズして使っているためか、デプロイしてもApplication Errorばかり出るようになってしまった。ローカルのMacではうまくいくのに。一週間くらい直そうと努力してみたけど直りそうにないのでHerokuでの運用を諦めてさくらVPS上のUbuntuで運用することにした。すこぶる快適。&lt;/p&gt;

&lt;p&gt;Herokuは確かに便利なんだけど、Herokuの中でどういう風にアプリケーションが動いているのかを把握しづらい。ファイルシステムに直接アクセスできないので、ログを見るにも &lt;code&gt;heroku logs&lt;/code&gt; とかやんないといけない。&lt;/p&gt;

&lt;p&gt;その点、自分で環境をいじれるサーバーだったらウェブアプリケーションのログはおろかシステムログまで見られるし、無理にHerokuで運用してHerokuで運用するために時間を割くのは馬鹿らしいような気がする。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Amazonの検索結果が新規ウィンドウで開かれるのを殺すユーザースクリプト</title>
    <link href="/2011/09/11/amazon-target-killer" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/09/11/amazon-target-killer</id>
    <content type="html">&lt;p&gt;Amazonの検索結果画面で、個別商品URLへのリンクが &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; 指定となっていてうざかったので &lt;code&gt;target=&quot;_self&quot;&lt;/code&gt; と置き換えるユーザースクリプトを書いた。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1208537.js?file=amazon_target_killer.user.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;地味に便利。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://gyazo.com/e465873994b9e141005777e2f67431f5.png&quot; alt=&quot;Amazon target killer&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RVMでRubyをアップグレードしたら "bad interpreter" という警告が出る</title>
    <link href="/2011/07/29/rvm-bad-interpreter-error" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/07/29/rvm-bad-interpreter-error</id>
    <content type="html">&lt;p&gt;Ruby 1.9.2-p290 がリリースされたので入れてみた。RVMで。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;rvm install 1.9.2 --with-readline-dir=/usr/local #homebrewで入れたreadlineのパスを指定&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rvm migrate ruby-1.9.2-p180 ruby-1.9.2-p290&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;migrate&lt;/code&gt; を実行したところ、警告が出ながらも次のような感じでマイグレーションは完了した。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;rvm migrate ruby-1.9.2-p180 ruby-1.9.2-p290&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Are you sure you wish to MOVE gems from ruby-1.9.2-p180 to ruby-1.9.2-p290?&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;This will overwrite existing gems in ruby-1.9.2-p290 and remove them from ruby-1.9.2-p180 (Y/n): Y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Moving gemsets...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Moving ruby-1.9.2-p180 to ruby-1.9.2-p290&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Making gemset ruby-1.9.2-p290 pristine.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ERROR: Error running &amp;#39;rvm gemset pristine&amp;#39; under ,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;please read /usr/local/rvm/log//gemset.pristine.log&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Moving ruby-1.9.2-p180@global to ruby-1.9.2-p290@global&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Making gemset ruby-1.9.2-p290@global pristine.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ERROR: Error running &amp;#39;rvm gemset pristine&amp;#39; under ,&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;please read /usr/local/rvm/log//gemset.pristine.log&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Do you wish to move over aliases? (Y/n): Y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Do you wish to move over wrappers? (Y/n): Y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Do you also wish to completely remove ruby-1.9.2-p180 (inc. archive)? (Y/n): Y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Successfully migrated ruby-1.9.2-p180 to ruby-1.9.2-p290&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一見、問題なく移行できたように思えるのだけど、この後rakeなどexecutableなgemをコマンドラインから実行すると以下のようなエラーが出る。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;zsh: /usr/local/rvm/gems/ruby-1.9.2-p290/bin/rake: bad interpreter: /usr/local/rvm/rubies/ruby-1.9.2-p180/bin/ruby: no such file or directory&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;rake aborted!&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;No Rakefile found (looking for: rakefile, Rakefile, rakefile.rb, Rakefile.rb)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;/usr/local/rvm/gems/ruby-1.9.2-p290/gems/rake-0.8.7/lib/rake.rb:2377:in `raw_load_rakefile&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;(See full trace by running task with --trace)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;shebangに書いてあるrubyのパスがmigrate時に削除した ruby-1.9.2-p180 なのが問題なわけだ。&lt;/p&gt;

&lt;p&gt;正しい対処方法かどうかは自信がないが、Rubyでサクサクッとshebangを書き換えるやつを書いた。以下みたいなやつ。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/1092544.js?file=fix_shebang.rb&quot;&gt;&lt;/script&gt;

&lt;p&gt;こいつを実行してやるとshebangが正しく書き換わったexecutableなgemができる。万が一のためにbackupファイルを作るのでこれをzshで &lt;code&gt;rm *_backup&lt;/code&gt; とかしてやるといいと思います。&lt;/p&gt;

&lt;p&gt;と思ったけど、結局↑のRubyの入れ方はまずいみたいで、jekyllとかCライブラリに依存する系のgemが動かなくなってしまったので &lt;code&gt;rvm implode&lt;/code&gt; してRVMをまるっと入れ替えた（20回くらいRubyをインストールしなおした）。次の記事にでも書きます…。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Liquidの中でLiquidをエスケープする</title>
    <link href="/2011/07/02/escape-in-liquid" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/07/02/escape-in-liquid</id>
    <content type="html">&lt;p&gt;JekyllはLiquidというRubyのテンプレートエンジンを採用してるんですが、Liquid内でLiquidの文法をエスケープする方法が分からず大変苦しんでおりました。Jekyllの公式のDocument呼んでもXML出力時とかCGI出力時にコンテンツをエスケープする方法は書いてあるのに、Liquidテンプレート自体をエスケープする方法が書いてなく、大変不満でした。しかしその方法が分かったのでお知らせいたします。元ネタはスタックオーバーフロー。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3426182/how-to-escape-liquid-template-tags&quot; title=&quot;web development - How to escape liquid template tags? - Stack Overflow&quot;&gt;web development - How to escape liquid template tags? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば &lt;code&gt;{% this }&lt;/code&gt; と表示させたかったらこうやります。&lt;/p&gt;

&lt;pre&gt;&amp;#123;&amp;#123; &quot;&amp;#123;% this &quot; %}&amp;#125;&amp;#125;&amp;#125;&lt;/pre&gt;

&lt;p&gt;ちょっとトリッキーですね。&lt;/p&gt;

&lt;p&gt;Pygmentsと組み合わせて使うことも可能ですが、いちいち &lt;code&gt;{% highlight }&lt;/code&gt; のなかでコメントアウト処理をしてあげないといけないません。面倒くさいですね。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jekyllにカテゴリ一覧を追加した</title>
    <link href="/2011/06/29/added-category-archives" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/06/29/added-category-archives</id>
    <content type="html">&lt;p&gt;Jekyllを使いだしてから気がつくと一年経ってました。いろいろ便利に使えており気に入っております。&lt;/p&gt;

&lt;p&gt;PygmentでコードをシンタックスハイライトしたりLSIで関連記事表示したりと結構手を入れてはいたんだけど、いわゆる世間の一般のブログにあるようなカテゴリ一覧表示機能と、カテゴリごとの記事アーカイブ機能がなくて、それを若干不便に思っておりました。&lt;/p&gt;

&lt;p&gt;ググってみたところ、プログラマー向けなブログツールなだけあっていろんな方法が出てきました。以下そのまとめ。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;カテゴリ一覧&lt;/h3&gt;

&lt;p&gt;JekyllのLiquid (テンプレート言語) には &lt;code&gt;{{ sites.categories }}&lt;/code&gt; みたいタグがあるんだけど、こいつが意図したとおりに動かない。普通のRuby使いの感覚からすると &lt;code&gt;site.categories&lt;/code&gt; ってカテゴリを沢山持った配列になってそうな気がするんだけどこれが違う。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; {{ for category in sites.categories }}
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ category.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; {{ endfor }}
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;↑みたいな感じのコード書くと何も表示されない。 &lt;code&gt;site.categoires&lt;/code&gt; はHashで、&lt;code&gt;{ &quot;カテゴリ名&quot; =&amp;gt; カテゴリ内の記事一覧 }&lt;/code&gt; みたいな構造になってる。LiquidでHashのキーを取りだす方法が分からず、どうにもこうにもいかなかったので他の人が作っているプラグインを利用することにした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rfelix/my_jekyll_extensions/blob/master/tag_category_iterator/tag_category_iterator.rb&quot; title=&quot;tag_category_iterator/tag_category_iterator.rb at master from rfelix/my_jekyll_extensions - GitHub&quot;&gt;tag_category_iterator/tag_category_iterator.rb at master from rfelix/my_jekyll_extensions - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑のファイルを &lt;code&gt;JEKYLL_ROOT/_plugins&lt;/code&gt; にコピーする。（&lt;code&gt;_plugins&lt;/code&gt; というディレクトリがなければ作る）。そんでテンプレートを変更する。↑のやつを↓みたいにする。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; {{ for category in sites.iterable.categories }}
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{ category.name }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; {{ endfor }}
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2行目のところが変更点です。これでカテゴリ一覧表示ができるようになる。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;カテゴリごとの記事一覧&lt;/h3&gt;

&lt;p&gt;カテゴリごとの記事一覧を表示する方法だけど、こういうのを発見した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://recursive-design.com/projects/jekyll-plugins/&quot; title=&quot;Jekyll Plugins - Recursive Design&quot;&gt;Jekyll Plugins - Recursive Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここの &lt;code&gt;generate_categories.rb&lt;/code&gt; を使えばカテゴリ内の記事一覧を作成できる。こんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.portalshit.net/categories/Ruby/&quot; title=&quot;Category: Ruby \| tech.portalshit.net&quot;&gt;Category: Ruby | tech.portalshit.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これもさっきのと同じように、&lt;code&gt;JEKYLL_ROOT/_plugins&lt;/code&gt; にファイルをコピーする。そんでLiquidテンプレートを書き換えるんだけど詳細はプラグイン内の記事をご確認くだしあ。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>User Streamで快適ネットストーキング生活</title>
    <link href="/2011/05/24/favstream.rb" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/05/24/favstream.rb</id>
    <content type="html">&lt;p&gt;暇だったので自動で特定のユーザーを延々favし続けるスクリプトを書いた。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/972943.js?file=favstream.rb&quot;&gt;&lt;/script&gt;

&lt;p&gt;ヒトデ君が書いた &lt;a href=&quot;https://github.com/hitode909/user-stream-receiver&quot; title=&quot;hitode909/user-stream-receiver - GitHub&quot;&gt;hitode909/user-stream-receiver - GitHub&lt;/a&gt; と&lt;a href=&quot;http://d.hatena.ne.jp/aquarla/20101020/1287540883&quot; title=&quot;Ruby+User Stream APIで無言リプライに高速返信するbotを作りました - ps aux \| grep aquarla&quot;&gt;Ruby+User Stream APIで無言リプライに高速返信するbotを作りました - ps aux | grep aquarla&lt;/a&gt; を参考にさせてもらった。というかほとんどまるパクリ。またOAuthのところはtily氏の &lt;a href=&quot;https://github.com/tily/ruby-oauth-cli-twitter&quot;&gt;tily/ruby-oauth-cli-twitter - GitHub&lt;/a&gt; に全面的に依存している。&lt;/p&gt;

&lt;p&gt;User Stremを受診してるのでcronとかの設定なしでネットストーキングしたい相手のことを延々追跡できる。しかも発言があった瞬間に即favする。大変気持ち悪いですね。&lt;/p&gt;

&lt;p&gt;しかしUser Streamはときどき調子が悪く、発言を拾い落とすこともある。そんなときは以下のコードを使う。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/972943.js?file=favoritter.rb&quot;&gt;&lt;/script&gt;

&lt;p&gt;これでUser Stream経由で取りこぼした発言もfavできる。それぞれ使い方はこんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  ruby favoritter.rb ストーキングしたい相手のユーザー名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  ruby favstream.rb ストーキングしたい相手のユーザー名&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <title>Titanium Mobileでなんか作りたい</title>
    <link href="/2011/05/03/titanium-era-has-come" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/05/03/titanium-era-has-come</id>
    <content type="html">&lt;p&gt;二月末に行ったスマートフォン開発環境セミナー(仮)でmasuidriveさんのTitanium Mobileについての発表を見てすっかり感化された。これからはJavaScriptで空を飛べる時代が来ると思った。&lt;/p&gt;

&lt;p&gt;ドイツの会社がやってるToDo管理のサービスに&lt;a href=&quot;http://www.6wunderkinder.com/wunderlist/&quot; title=&quot;Task Management At Its Best With Wunderlist \| 6Wunderkinder&quot;&gt;Wunderlist&lt;/a&gt;ってのがあって、これは結構かっちょいUIのiPhone/Mac/PC/Webアプリを出してたりする。なんでそんなにマルチプラットフォーム対応できんの？ と思ってたらどうもTitanium MobileとTitanium Desktopを使ってるみたい。だから簡単にマルチプラットフォーム対応できてるわけ。他にもThe Hit Listが一向にiPhoneアプリを出さないのでそれに業を煮やした&lt;a href=&quot;http://rawberg.com/&quot; title=&quot;JavaScript Programmer &amp;amp; Bootstrap Entrepreneur \| David Feinberg&quot;&gt;Senchaの社員&lt;/a&gt;が作ったHub ListっていうアプリもJavaScriptでデスクトップアプリを書いててマルチプラットフォーム対応してる。&lt;/p&gt;

&lt;p&gt;しかし、なんかTitanium Desktop使って僕みたいなスキルしょぼい人がアプリ作るときじゃくせい（なぜか変換できない）を突かれて困ったことになる懸念もあるみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tokuhirom/20110418/1303150743&quot;&gt;Titanium Desktop 雑感。 - TokuLog 改メ tokuhirom’s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;とはいえ、最近プログラム書き始めたばっかでObjective-CとかJavaとか分かんない自分には、JavaScriptでiPhone/Androidはもちろんのこと、MacやWindows、はてはLinux向けのデスクトップアプリケーションが作れてしまうのTitanium MobileとTitanium Desktopにはとてつもない魅力を感じる。&lt;/p&gt;

&lt;p&gt;連休期間中にしょぼいのでいいからなんか一個作りたい。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>MacVimでコピペできたんですけど…</title>
    <link href="/2011/04/24/macvim-de-kopipe-dekita" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/04/24/macvim-de-kopipe-dekita</id>
    <content type="html">&lt;p&gt;MacVimでコピペできなくて（MacVim内のヤンクじゃなくて、他のアプリケーションでコピーしたもののペースト）困ってたんだけど（&lt;a href=&quot;http://tech.portalshit.net/2011/04/23/macvim-kopipe-dekinai/&quot; title=&quot;MacVimでコピペできないんですけど… \| tech.portalshit.net&quot;&gt;MacVimでコピペできないんですけど… | tech.portalshit.net&lt;/a&gt;）、できるようになりました。原因は mvim っていう、コマンドラインからMacVimを起動するためのシェルスクリプトだった。MacVim kaoriyaのWikiで紹介されてるやつ。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/splhack/macvim/blob/master/src/MacVim/mvim&quot; title=&quot;src/MacVim/mvim at master from splhack/macvim - GitHub&quot;&gt;src/MacVim/mvim at master from splhack/macvim - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こいつ経由でMacVimを起動したときはどうも他のアプリケーションからのコピペがうまくいかないみたい。&lt;/p&gt;

&lt;p&gt;同じくMacVim Kaoriya Wikiで紹介されている、MacVimを起動するコマンドをaliasで化したものを &lt;code&gt;.zshrc&lt;/code&gt; に書いたところうまくコピペが機能した。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gvim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;env LANG=ja_JP.UTF-8 open -a /Applications/MacVim.app &amp;quot;$@&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;同じ問題でお困りの方はお試しあれ。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;追記&lt;/h3&gt;

&lt;p&gt;なんか違うっぽい。alias経由で呼び出してもダメなときはダメだもん。いったい何なんすかね。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>DataMapperでAUTO INCREMENT値をリセットする</title>
    <link href="/2011/04/24/datamapper-sqlite3-auto-increment-reset" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/04/24/datamapper-sqlite3-auto-increment-reset</id>
    <content type="html">&lt;p&gt;ポータルシットをLokkaに置き換えたくていろいろやってる。ポータルシットの過去記事をYAMLでエクスポートし、それをLokkaのDBに取り込む作業をやってる。TDD BootCampに参加したので、テストファーストしながらの作業。RSpecでテストコードを書き、ログが正しくインポートできることを確認する。テスト終了時 &lt;code&gt;after(:all)&lt;/code&gt; フックで、取り込んだログを削除してる。コードはこんな感じ。ちなみにLokkaはDataMapperをORMに採用してるので以下はDataMapperでの話。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;しかしこれでは &lt;code&gt;AUTO INCREMENT&lt;/code&gt; の値がリセットされず、テストを繰り返す度に &lt;code&gt;AUTO INCREMENT&lt;/code&gt; の値が増えていってうざかった。&lt;/p&gt;

&lt;p&gt;DataMapperの機能で &lt;code&gt;AUTO INCREMENT&lt;/code&gt; 値をリセットするのってないのかなと5秒くらい探してみたけど見つからなかったので、SQLを直接実行する方法を採用した。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.s21g.com/articles/1408&quot; title=&quot;DataMapperでSQLを直接実行する - Hello, world! - s21g&quot;&gt;DataMapperでSQLを直接実行する - Hello, world! - s21g&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみにRDBMSに採用してるのはSQLite3。SQLiteでは &lt;code&gt;UPDTE sqlite_sequence SET seq=0 WHERE name='テーブル名';&lt;/code&gt; みたいなコードで &lt;code&gt;AUTO INCREMENT&lt;/code&gt; 値を任意の値に設定できるみたい。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://beyond.cocolog-nifty.com/akutoku/2008/04/auto_increment1_a1f6.html&quot; title=&quot;[悪徳商法？支店]: auto_incrementの値を1に戻す方法&quot;&gt;[悪徳商法？支店]: auto_incrementの値を1に戻す方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最終的な &lt;code&gt;after(:all)&lt;/code&gt; フックはこんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;update sqlite_sequence set seq=0 where name=&amp;quot;entries&amp;quot;;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;テスト実行後にはすべてのデータがデータベースから削除されて、&lt;code&gt;AUTO INCREMENT&lt;/code&gt; の値もリセットされる。人畜無害なテストコード万歳。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>MacVimでコピペできないんですけど…</title>
    <link href="/2011/04/23/macvim-kopipe-dekinai" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/04/23/macvim-kopipe-dekinai</id>
    <content type="html">&lt;h3 id=&quot;macvim&quot;&gt;MacVimでコピペできないのって仕様？&lt;/h3&gt;

&lt;p&gt;MacVimに他のアプリケーションでコピーしたものを貼り付けられないのって仕様？ いろいろ調べてみたけどストライクな解決方法はないみたい。結局CLIのVim使ってる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/sea_mountain/20110421/1303362772&quot; title=&quot;【Vim】【Mac】Vimのヤンクでクリップボードにコピーする - 徒然なるままに&quot;&gt;【Vim】【Mac】Vimのヤンクでクリップボードにコピーする - 徒然なるままに&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twitter.com/#!/nekoya/status/2647362030&quot; title=&quot;Twitter / @nekoya (id:studio-m): MacVim-kaoriyaで単純なペーストがエラー ...&quot;&gt;Twitter / @nekoya (id:studio-m): MacVim-kaoriyaで単純なペーストがエラー …&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://twitter.com/#!/marutanm/statuses/51557561425592320&quot; title=&quot;Twitter / @marutanm Air: MacVimでpasteboardからペーストできな ...&quot;&gt;Twitter / @marutanm Air: MacVimでpasteboardからペーストできな …&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Jekyllで関連ポストを表示する</title>
    <link href="/2011/04/17/related-post-in-jekyll" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/04/17/related-post-in-jekyll</id>
    <content type="html">&lt;h3 id=&quot;section&quot;&gt;関連記事表示&lt;/h3&gt;

&lt;p&gt;Jekyllで関連記事を表示するようにした。jekyllを実行するときに &lt;code&gt;jekyll --lsi&lt;/code&gt; とするんだけど、Classifierというgemが必要。ただしClassifierを入れてるだけだと似てる記事を探すのにすんごい時間がかかるので、gslというgemを入れる。しかしこれはただ単に &lt;code&gt;gem install gsl&lt;/code&gt; しただけでは以下のようなエラーが出る。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Fetching: narray-0.5.9.9.gem (100%)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Building native extensions.  This could take a while...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Fetching: gsl-1.14.7.gem (100%)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Building native extensions.  This could take a while...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ERROR:  Error installing gsl:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        ERROR: Failed to build gem native extension.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        /Users/morygonzalez/.rvm/rubies/ruby-1.9.2-p136/bin/ruby extconf.rb&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;checking gsl version... *** extconf.rb failed ***&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Could not create Makefile due to some reason, probably lack of&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;necessary libraries and/or headers.  Check the mkmf.log file for more&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;details.  You may need configuration options.&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;Provided configuration options:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --with-opt-dir&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --without-opt-dir&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --with-opt-include&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --without-opt-include=${opt-dir}/include&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --with-opt-lib&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --without-opt-lib=${opt-dir}/lib&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --with-make-prog&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --without-make-prog&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --srcdir=.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --curdir&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        --ruby=/Users/morygonzalez/.rvm/rubies/ruby-1.9.2-p136/bin/ruby&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;extconf.rb:237:in `rescue in &amp;lt;main&amp;gt;&amp;#39;: Check GSL&amp;gt;=0.9.4 is installed, and the command &amp;quot;gsl-config&amp;quot; is in search path. (RuntimeError)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;        from extconf.rb:138:in `&amp;lt;main&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;GSL（GNU Scientific Library）が入ってないのがダメらしい。Homebrewでインストールする。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; brew install gsl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そんでもう一回 &lt;code&gt;gem install gsl&lt;/code&gt; するとうまく入った。 &lt;code&gt;_config.yaml&lt;/code&gt; に &lt;code&gt;lsi: true&lt;/code&gt; という記述を追記して jekyll を実行すると関連記事が表示されるようになった。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;最近の記事表示&lt;/h3&gt;

&lt;p&gt;ついでに見た目を調整した。サイドバーに全部の記事が表示されてたのがうざかったので10件だけ表示するようにした。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;diff&quot;&gt;8c72..2c84ea5 100644
&lt;span class=&quot;gd&quot;&gt;--- a/_layouts/post.html&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/_layouts/post.html&lt;/span&gt;
7 +69,7 @@
 
         &amp;lt;h3&amp;gt;Latest Posts&amp;lt;/h3&amp;gt;
         &amp;lt;ul&amp;gt;
&lt;span class=&quot;gd&quot;&gt;-          {`% for post in site.posts `%}&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+          {`% for post in site.posts limit:10 `%}&lt;/span&gt;
           &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
           {`% endfor `%}
         &amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(↑Liquidでエスケープする方法がわからんかったので {`% とかなってますけど、正しくは {% です)&lt;/p&gt;

&lt;p&gt;Liquidでは配列に対して &lt;code&gt;{&amp;#37; for post in site.posts limit:10 &amp;#37;}&lt;/code&gt; という書き方をすることでループ処理の回数をコントロールできるみたい。&lt;/p&gt;

&lt;p&gt;全体的に見やすくなりすっきりした。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>確認ダイアログを出しながら削除するスクリプト</title>
    <link href="/2011/04/16/ruby-rm-dir" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/04/16/ruby-rm-dir</id>
    <content type="html">&lt;p&gt;確認ダイアログを出しながらディレクトリやファイルを削除するスクリプトを書いた。大したコード書いてないし逆引きRubyに載ってたコードをまるパクリしてるところもあるけど便利だと思う。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/921460.js?file=cleanup.rb&quot;&gt;&lt;/script&gt;

&lt;p&gt;そのディレクトリにあるファイル/ディレクトリ一覧を取得した後、「このファイル/ディレクトリは作られてから何日経っています。削除しますか？ (y/n)」というダイアログ（英語）を表示する。&lt;code&gt;y&lt;/code&gt; が入力されると削除を行う。地味に使える。&lt;/p&gt;

&lt;p&gt;RubyのFileUtilsはすごく便利だと思う。シェルスクリプトでしこしこ書くのがアホらしくなる。RubyがPerlなみにあらゆるuni*x系のサーバーに入るようになったらさぞかし便利だろうと思う。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>TDD Boot Campの感想2 &mdash; ペアプログラミングで気づいたこと</title>
    <link href="/2011/03/24/i-am-an-impotent-programmer" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/03/24/i-am-an-impotent-programmer</id>
    <content type="html">&lt;h3 id=&quot;vimmability&quot;&gt;Vimmabilityのなさ&lt;/h3&gt;

&lt;p&gt;TDD Boot Camp福岡で生まれて初めてペアプログラミングを経験した。自分のVimmabilityが思いの外低く焦った。書くの超とろいし、Rubyも全然分かってないしペア組んでもらった人に迷惑かけまくりな感じ。会社では誰もVimとか使ってなくてみんなEclipseとか秀丸使ってるし、周りにVimmerがいないので自分がどんなにしょぼいVim使いなのか気づいてなかった。&lt;/p&gt;

&lt;p&gt;とりあえず今回、ペアを組んだ &lt;a href=&quot;http://twitter.com/mallowlabs&quot;&gt;@mallowlabs&lt;/a&gt; さんに &lt;code&gt;cw&lt;/code&gt; とか &lt;code&gt;&amp;lt;数字&amp;gt;y&lt;/code&gt; とかを教えてもらった。あと&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vimでバックスペース使ったら負けだから&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と言われてしまったのでバックスペースと矢印キーをなるべく使わずにプログラム書きたいと思います。でもTextMateとかCodaとか便利だからついつい使ってしまうんよね…。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;プログラムが全然書けない&lt;/h3&gt;

&lt;p&gt;思ってたよりもプログラムができないことに気がついた。お題を与えられて、制限時間があるなかでコードを書いていかなければならない。しかもペアプログラミングなので一人でちんたら時間をかけて書くわけにもいかない。そしてやっぱ人に見られてると緊張する。Rubyの基本的なメソッドとかが分かってなくて教えてもらいながら書いてたけど、わからないと緊張してしまって頭が真っ白になって何も書けなくなる。いつもリファレンス本を片手にコードを書き捨てていたので、よくないなぁと思った。&lt;/p&gt;

&lt;p&gt;というか、そもそも自分は仕事であまりコードを書いてないのだ。TDD Boot Campに来てる人たちはみんな公私ともにばりばりコードを書いててとても楽しそうだった。なんだかとても羨ましかった。&lt;/p&gt;

&lt;p&gt;いろいろ考えないとなー、と思わせられた勉強会だった。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ubuntuでは使うあてなくてもユーザーアカウントは複数作った方がいい</title>
    <link href="/2011/03/24/dont-uninstall-current-shell-without-chsh" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/03/24/dont-uninstall-current-shell-without-chsh</id>
    <content type="html">&lt;p&gt;この前、さくらVPSに入れているUbuntuのzshで &lt;code&gt;ls&lt;/code&gt; とか &lt;code&gt;cd&lt;/code&gt; とか打ったとき、変なエラーメッセージが出るようになった。原因不明。しょうがないのでzshをインストールしなおそうと、&lt;code&gt;chsh&lt;/code&gt; してbashとかに切り替えずに &lt;code&gt;sudo apt-get remove zsh&lt;/code&gt; してしまった。そこで混乱してしまって &lt;code&gt;Ctrl + D&lt;/code&gt; しちゃったもんだからSSH閉じてしまって、なんとUbuntuにログインできなくなってしまった。&lt;/p&gt;

&lt;p&gt;Ubuntuは &lt;code&gt;root&lt;/code&gt; というアカウントがなくてなんでも &lt;code&gt;sudo&lt;/code&gt; するか、 &lt;code&gt;sudo su&lt;/code&gt; で無理矢理rootになるしかないので、rootでログインしてchshしてやるという救済手段がとれず、にっちもさっちもいかなくなってUbuntuを再インストールした。&lt;/p&gt;

&lt;p&gt;ちょっと調べたら、こういうアクシデントを防ぐために、/etc/shells にzshを足さず、chshでデフォルトシェルにもしないという人もいるみたい。&lt;code&gt;.bashrc&lt;/code&gt; に次のように書くそうだ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f /bin/zsh &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/zsh
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これだと何かのトラブルでzshが起動しないことがあってもbashでログインできるということらしい。zshがちゃんとしてるときはzshでログインするという理屈だ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.unoh.net/2010/05/zsh.html&quot;&gt;ウノウラボ by Zynga Japan: zshはじめました。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかしこれには結構重い副作用があるみたい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/tyru/20100922/exec_bin_zsh_considered_harmful&quot;&gt;.bash_profileに「exec /bin/zsh」と書くのはやめたほうがいい - Humanity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一理ある。&lt;/p&gt;

&lt;p&gt;というわけでUbuntuやrootでsshできない環境ででzshを使う場合は、何らかのトラブルでzshが起動しない、シェルにログインできなくなることを想定し、保険として普段はまったく使わない非常用のアカウントを作っておくと良いと思った。もちろんsudoersに指定しておかないと意味ないけどね。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>TDD Boot Camp福岡に参加した</title>
    <link href="/2011/03/21/tdd-bootcamp-fukuoka" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/03/21/tdd-bootcamp-fukuoka</id>
    <content type="html">&lt;p&gt;昨日と一昨日の二日間、TDD Boot Camp 福岡に参加した。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;参加しようと思ったわけ&lt;/h3&gt;

&lt;p&gt;勤めている会社にはテストがない。いや、テストはある。エクセルにテスト項目をたくさん書き出していって手動テストだ。テストコードがない。人力で三人くらいが夜なべしてテストする（だいたいスケジュールには遅延が発生する）。これはどうしたっておかしい。開発前に要件定義書、設計書を書いて開発して、開発が終わったらエクセルで長大なテストシートを作成し、手動テストを行う。そしてバグや思わぬ不具合が発見されるとプログラムに改修を加える。欠陥や不都合が発見される度に連動して設計書にも修正・変更が加えられ、Do Repeat Yourselfな感じになってる。毎日毎日ドキュメント作成などの開発以外のタスクに時間を割かれるので新しい技術に触れる機会がないし、遅くまで残って仕事してから帰宅するので趣味プログラミングで知見を広めることもできない（福岡に来てからのこのブログの更新状況を見ればおわかりいただけるかと）。この状況をなんとかしたいと思っていて、藁をもすがる思いでTDD Boot Campに参加した。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;感想&lt;/h3&gt;

&lt;p&gt;一日目は『プログラマが知るべき97のこと』の監修やTDDで有名な &lt;a href=&quot;http://twitter.com/t_wada&quot;&gt;@t_wada&lt;/a&gt; さんのレクチャーで、TDDとは何かが説明された。以下印象に残った点。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;良いテスト
    &lt;ul&gt;
      &lt;li&gt;自動化されている&lt;/li&gt;
      &lt;li&gt;徹底している&lt;/li&gt;
      &lt;li&gt;何度でも実行可能&lt;/li&gt;
      &lt;li&gt;独立している&lt;/li&gt;
      &lt;li&gt;プロのコード
        &lt;ul&gt;
          &lt;li&gt;テストコードもプロダクトコードと同じ品質であることが求められる（リファクタリング、DRY原則の貫徹など）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TDD三原則
    &lt;ul&gt;
      &lt;li&gt;単体テストコードを書く前に製品コードを書いてはいけない&lt;/li&gt;
      &lt;li&gt;適切に失敗する単体テストコードができるまで、次の単体テストコードを書いてはならない&lt;/li&gt;
      &lt;li&gt;単体テストコードに対応する以上に製品コードを書かない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;なぜTDDするのか
    &lt;ul&gt;
      &lt;li&gt;自分が完璧ではないことがわかっているから
        &lt;ul&gt;
          &lt;li&gt;最初から思い通りにコードを書けるほどに私たちは賢くない&lt;/li&gt;
          &lt;li&gt;最初から思い通りに動作するほど対象は単純ではない&lt;/li&gt;
          &lt;li&gt;素早く対象に近づき、フィードバックを得て方向修正をしながら開発を行う必要がある&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;テストの目的は健康
    &lt;ul&gt;
      &lt;li&gt;変化に対応できるのは健康体のコードだけ&lt;/li&gt;
      &lt;li&gt;変化に対応できるのは健康体のチームだけ
        &lt;ul&gt;
          &lt;li&gt;毎日残業する、毎日レッドブル飲んだりしていてはダメ&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TDDの導入効果
    &lt;ul&gt;
      &lt;li&gt;MSやIBMでTDD導入後、欠陥の割合が4割から9割削減された。&lt;/li&gt;
      &lt;li&gt;コード実装時間は15%から35%増加した。
        &lt;ul&gt;
          &lt;li&gt;しかし結果的にはバグが激減するので開発工数自体は減る。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TDDは才能ではなくスキル
    &lt;ul&gt;
      &lt;li&gt;練習すれば習得可能&lt;/li&gt;
      &lt;li&gt;量は質に転化する&lt;/li&gt;
      &lt;li&gt;写経しましょう！
        &lt;ul&gt;
          &lt;li&gt;PCにGitをインストールし、ページをキープできるブックスタンドを買って、ケント・ベック本をひたすら写経。ビルドを実行する度にコミットする。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;テストのみならず、自動化やバージョンコントロールの重要性が説かれた。&lt;/p&gt;

&lt;p&gt;二日目には &lt;a href=&quot;http://twitter.com/bleis&quot;&gt;@bleis&lt;/a&gt; さんによるGitの効果的な利用方法やJenkinsを利用した継続的インテグレーションの実践例、 &lt;a href=&quot;http://twitter.com/akineko&quot;&gt;@akineko&lt;/a&gt; さんによるOMakeを利用した自動ビルド、自動テスト、自動コミットの話など。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;ペアプログラミングを体験した&lt;/h3&gt;

&lt;p&gt;ペアプログラミングを生まれて体験した。 &lt;a href=&quot;http://twitter.com/mallowlabs&quot;&gt;@mallowlabs&lt;/a&gt; さんとRubyでペアプログラミングをさせてもらった。講師陣が出題する課題を解いていくというもの。当然テスト駆動。テスティングフレームワークにはRSpecを利用した。&lt;/p&gt;

&lt;p&gt;WEB + DB PressなどのRSpec特集を写経したことはあったけど、時間制限がある中で、他の人とペアを組んでプログラムを書いていく作業はかなりエキサイティングだった。&lt;/p&gt;

&lt;p&gt;ただ自分のRubyスキルおよびVimのスキルが著しく劣っていたため、@mallowlabs さんの足を引っ張っていた感は否めない。正直申し訳なかったです。&lt;/p&gt;

&lt;p&gt;全般的に、自分の知識のなさ、スキルのなさが実感できた&lt;/p&gt;

&lt;p&gt;以下、初日に行ったFizzBuzz問題と主に二日目に取り組んだTwitterのタイムラインをカテゴリ分けするという課題の成果物。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/879647&quot;&gt;TDD Boot Camp 福岡 — Gist&lt;/a&gt;
&lt;a href=&quot;https://gist.github.com/878159&quot;&gt;TDDBC でペアプロした結果です — Gist&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;tdd&quot;&gt;TDDをいかにして根付かせるか&lt;/h3&gt;

&lt;p&gt;勉強会に参加していきなりコードが書けるようになるわけでは当然ないので、継続的な勉強が必要だと感じた。いっぱい本を紹介してもらったので積ん読本を何冊か片付けたら『レガシー・コード改善ガイド』と『テスト駆動開発入門』を買おうと思った。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RVMきもい</title>
    <link href="/2011/02/09/rvm-is-kimoi" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/02/09/rvm-is-kimoi</id>
    <content type="html">&lt;p&gt;昨日の続きのようなもの。LokkaをUbuntu上で動かそうといろいろやってます。passenger入れて、 &lt;code&gt;passenger-install-nginx-module&lt;/code&gt; を実行しようとしたらエラーが出た。お前はrootじゃないからnginxインストールできひんわ、みたいなメッセージが出る。sudoったりrootになってインストールしようとすると今度はpassengerなんていうgemはないわ、って怒られる。sudoしたときには.rvm内のgemパッケージではなくシステムのgemパッケージを見ようとするっぽい。またrootになるとRVMではなくシステムのRubyが実行されるので同じくpassengerなんてgemないわ、って怒られる。システムのRubyは1.8.7だし、なるべくなら使いたくない。RVMのRubyを使ってpassenger + nginxな環境作れないのかよ、とググってたら以下のような記事を発見した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.blog.bridgeutopiaweb.com/post/install-rvm-passenger-nginx-and-rails-3-on-ubuntu-lucid-lynx/&quot;&gt;Install RVM, Passenger, Nginx and Rails 3 on Ubuntu Lucid Lynx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なんと、RVMには &lt;code&gt;rvmsudo&lt;/code&gt; というコマンドがあるらしい！ 試しに&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rvmsudo passenger-install-nginx-module
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を実行してみたところ、お前はroot権限がないんじゃ〜とエラーが出ていたところも無事通過してnginxをインストールできてしまった。以前、sudoで無理矢理nginxをインストールしたときは、 &lt;code&gt;nginx.conf&lt;/code&gt; 内で、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nginx&quot;&gt;      &lt;span class=&quot;k&quot;&gt;passenger_root&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/morygonzalez/.rvm/gems/ruby-1.9.2-p136/gems/passenger-3.0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;passenger_ruby&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/bin/ruby1.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;となっていて大変気持ち悪かったし、Passengerも「PassengerとRubyの本体でバージョンの不整合があるだろヴォケ」みたいな警告出してた。それが &lt;code&gt;rvmsudo&lt;/code&gt; のおかげで &lt;code&gt;nginx.conf&lt;/code&gt; に書き込まれる値も以下の通りとなるので、とりあえずPassenger（RubyGems）とRubyのバージョンが異なるというような問題は回避できる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nginx&quot;&gt;      &lt;span class=&quot;k&quot;&gt;passenger_root&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/morygonzalez/.rvm/gems/ruby-1.9.2-p136/gems/passenger-3.0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;passenger_ruby&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/morygonzalez/.rvm/wrappers/ruby-1.9.2-p136/ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ただ、なんでか分からないのだけどnginxがうまく動いてくれなくて、無事Webサーバーを起動できてない感じです。&lt;/p&gt;

&lt;p&gt;それにしてもRVMは、本当にきもいと思う。&lt;a href=&quot;http://d.hatena.ne.jp/rochefort/20100907/p1&quot; title=&quot;rvmのirbで日本語入力できない - うんたらかんたら日記&quot;&gt;readlineとかまで.rvm内にインストールできる&lt;/a&gt;できるし、いったい何考えてるんでしょうかね。きもすぎて便利です。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RVMで入れたRubyをApacheとかから使いたい</title>
    <link href="/2011/02/08/rvm-with-apache" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/02/08/rvm-with-apache</id>
    <content type="html">&lt;p&gt;RVMを使ってます。RVMで入れたRubyがshebangに &lt;code&gt;#!/usr/bin/env ruby&lt;/code&gt; と書いたときに呼び出されて欲しいと思ってます。シェルから&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RUBY_DESCRIPTION&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;なファイル（hoge.rb）があったとします。これを&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ruby hoge.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とシェルから呼び出したときにはちゃんと&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ruby 1.9.2p136 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2010-12-25 revision 30365&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin10.6.0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と表示されます。しかしTextMateでRunしたときや、Apacheから同じshebangで呼び出したときには、systemのRubyが呼ばれます。&lt;/p&gt;

&lt;p&gt;これ、もう半年くらい解決方法探してる気がする。&lt;/p&gt;

&lt;p&gt;TextMateでRunしたときにsystemのRubyが呼ばれるのはともかくとして（テストするときはシェルから呼び出すのでRVMのRubyで実行できる）、Apacheで新しめのRubyを使いたいときはどうすればよいのでしょう。まさかshebangに &lt;code&gt;~/.rvm/bin/ruby-1.9.2-p136&lt;/code&gt; とか書くんじゃろか。&lt;/p&gt;

&lt;p&gt;cxxさんに質問したら &lt;a href=&quot;http://rvm.beginrescueend.com/deployment/system-wide/&quot;&gt;RVM: Ruby Version Manager - Installing RVM System Wide&lt;/a&gt; というURLを教えてもらった。今日は眠いのでまた今度試す。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>AutoPagerizedなページでもJavaScriptを動かす</title>
    <link href="/2011/01/02/make-javascript-runnable-with-autopagerize" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2011/01/02/make-javascript-runnable-with-autopagerize</id>
    <content type="html">&lt;p&gt;あけましておめでとうございます。なんか2010年後半は転職とか引っ越しとかあってあまりここに記事を書けなかったのが残念です。Rubyとか全然さわってねーし、JavaScriptも忘却曲線の彼方。というわけで2011年一発目はJavaScriptについて。&lt;/p&gt;

&lt;p&gt;AutoPagerize対応なページで、読み込まれた2ページ目以降でもJavaScriptを動かす方法について調べてみた。oAutoPagerizeのos0xさんのページでまとめられてる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/os0x/20090829/1251556449&quot;&gt;AutoPagerizeで継ぎ足された部分に自分のスクリプトを適用する方法あれこれ - 0xFF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いちばん手っ取り早そうだったので、以下のような書き方をした。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AutoPagerize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AutoPagerize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fucintion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 実行したい処理&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ただ無名関数は呼び出せないので、二回書かなければならなくなる。これはアホっぽい。関数リテラルにして呼び出し用に &lt;code&gt;function init()&lt;/code&gt; みたいのを書き、その中から呼び出せばよい。そしてその &lt;code&gt;init()&lt;/code&gt; を上記 &lt;code&gt;// 実行したい処理&lt;/code&gt; 内にも書いてあげればオッケーだ（もちろん &lt;code&gt;window.onload&lt;/code&gt; で呼び出す必要もある）。&lt;/p&gt;

&lt;p&gt;jQueryについては &lt;code&gt;live()&lt;/code&gt; というメソッドがある。これは動的に生成された要素にも処理を適用してくれる非常にありがたいメソッドだ。しかし個人的な事情で、 &lt;code&gt;live()&lt;/code&gt; というメソッドと一緒に、処理を一度しか実行しないというメソッド &lt;code&gt;one()&lt;/code&gt; も適用している要素があり、これを二つ両立するのがjQuery的に無理っぽい。単純に処理実行のフラグを作って処理を分ければいいんだけど、これにもjQuery的なかっこいい書き方があることを知った。ネタもとはこちら。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3796207/using-one-with-live-jquery&quot;&gt;Using .one() with .live() jQuery - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;処理を適用したい要素&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;live&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;oneclicked&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Your code&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;oneclicked&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;jQuery().data()&lt;/code&gt; 、なかなか便利そうだ。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>オープンソースカンファレンス福岡2010</title>
    <link href="/2010/12/11/open-source-conference" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/12/11/open-source-conference</id>
    <content type="html">&lt;p&gt;福岡工業大学で行われた、オープンソースカンファレンス福岡2010に行った。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.usp-lab.com/&quot; title=&quot;Universal Shell Programing Laboratory&quot;&gt;usp lab&lt;/a&gt;のシェルスクリプトで業務用基幹システムを開発する話が面白かった。一般的なプログラミング言語は使わずに、シェルで生のLinuxを使って作業を行わせる。DBは使わずデータはTextで持つ。HTTP関連のあれこれもシェルスクリプトで行う。このためセキュリティのことは考えないといけないらしいんだけど（フロントエンドとバックエンドがシェルスクリプトでつながってるため）、大手のシステム会社が100人月とかみたいな見積を出す案件を10人月程度でやったそう。具体的には無印良品のシステムとか。遅めに会場に入ったので資料は売り切れで貰えず、細かい数字は自信がないんだけど、無印のやつは一年間に10億円かかってたシステム関連の費用が2億円程度に抑えられるようになったそう。mknodとかsedコマンドを駆使した並列処理のデモは本当に面白かった。へー、シェルスクリプトだけでこんなにできるんだー、っていう感じ。1億行のテキストデータ処理を53秒で終わらせたりとか。「Linuxはなるべく生で使いましょう」という言葉がとても深く印象に残っている。Railsみたいな便利なフレームワークを使った開発とはまったく異なるけど、UNIXの「小さいものは美しい」という理念のもと、とんでもなく効率的に開発を行っている様がとてつもなくクールだった。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>iTermでVimを使うと矢印キーでカーソル移動できない</title>
    <link href="/2010/10/26/iterm-arrow-key-issue" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/10/26/iterm-arrow-key-issue</id>
    <content type="html">&lt;p&gt;iTerm 2が素晴らしいということなのでiTermをぼちぼち使ってるんですけど、Vimを起動したときに矢印キーで移動できないことが分かった。「Vimで矢印キーでカーソル移動とか小学生かよ」みたいなご意見もあるでしょうけど、入力モードのときに移動したくなったら &lt;code&gt;j, k, h, l&lt;/code&gt; じゃ移動できないでしょ？ そこで矢印キーですよ。&lt;/p&gt;

&lt;p&gt;iTermでVimを使っているときも矢印キーでカーソル移動できないものかと、軽くググってみたところ次のような記事に遭遇した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/takimo/20080308/1205047505&quot; title=&quot;MacBookのiTermでVimを使う時矢印キーで移動が出来ないときの解決方法 - Nobody is perfect.&quot;&gt;MacBookのiTermでVimを使う時矢印キーで移動が出来ないときの解決方法 - Nobody is perfect.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを参考にとりあえず以下のように &lt;code&gt;.zshrc&lt;/code&gt; に書いた。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${TERM_PROGRAM}&amp;quot;&lt;/span&gt; in
iTerm*&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dtterm
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;しかし、これはちょっと自分的にはいただけなかった。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dtterm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ってやると、termcap的な何かの作用で、Vimを閉じたときにコンソールを復元できなくなる（参照： &lt;a href=&quot;http://tech.portalshit.net/2010/07/07/finish-editing-then-restore-console/&quot; title=&quot;Vimで編集を終了した後、元のコンソールの状態を復元したい \| tech.portalshit.net - CakePHP, Rails, JavaScript&quot;&gt;Vimで編集を終了した後、元のコンソールの状態を復元したい&lt;/a&gt;）。僕はVimを閉じた後はコンソールを復元したい派なので、このやり方は受け入れられなかった。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.termcap&lt;/code&gt; に何か書くことも考えたけど、 &lt;code&gt;.termcap&lt;/code&gt; で条件分岐する書き方が分からなかったのでさらにググってみた。すると外人が「iTermの設定で何とかできる」みたいなことを書いてるのを発見した。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.help2go.com/Tutorials/Mac_OS/Using_Arrow_Keys_in_iTerm_with_vi.html&quot; title=&quot;Help2Go - free computer help and advice - Using Arrow Keys in iTerm with vi&quot;&gt;Help2Go - free computer help and advice - Using Arrow Keys in iTerm with vi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;なるほど、 &lt;code&gt;.vimrc&lt;/code&gt; とか &lt;code&gt;.zshrc&lt;/code&gt; とか側で回避する方法ばかり考えていたけどiTermで回避する方法を考えればよいわけか。&lt;/p&gt;

&lt;p&gt;で、iTermを開いてみたところ、iTerm 1の頃から引き継いでいるBookmarkのDefaultの設定がよくなかったみたい。具体的には矢印キーそれぞれに &lt;code&gt;^[[A&lt;/code&gt; とか &lt;code&gt;^[[B&lt;/code&gt; みたいなキーが割り振られていて、このせいで矢印キーが使えなくなっていたわけだ。&lt;/p&gt;

&lt;p&gt;Load Presetから “Use xterm Defaults” を選んでみたところ、無事矢印キーでカーソル移動できるようになった。めでたしめでたし。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ruby 1.9とRails 3とRSpec 2と</title>
    <link href="/2010/10/20/ruby1.9-rails3-rspec-2" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/10/20/ruby1.9-rails3-rspec-2</id>
    <content type="html">&lt;p&gt;Ruby 1.9、Rails 3、RSpec 2で開発してる。いままでRubyとRailsになれるのに一杯一杯でテスト駆動開発できてなかったので、きちんとテストファーストでやることにした。&lt;/p&gt;

&lt;p&gt;そんで環境を整えてたんだけど、RSpecはRails 3に合わせてVersion 2が出てるみたい。しかも結構変わってる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; spec -c spec/*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とかやってもエラーが出る。 &lt;code&gt;which spec&lt;/code&gt; すると &lt;code&gt;/usr/bin/spec&lt;/code&gt; と出ちゃう。どうやら &lt;code&gt;spec&lt;/code&gt; で発動されるのはRSpec 1.3のものみたい。&lt;/p&gt;

&lt;p&gt;RSpec 2からはコマンド名が変更されており、テストコードを実行したいときは以下のように書くみたい。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rspec -c spec/*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これできちんとテストコードが実行された。かと思いきやFailureが。&lt;/p&gt;

&lt;p&gt;Ruby 1.9で動かしてるから、コードの中に日本語を書くときは一行目に&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書いてテキストエンコーディングを明示してあげないといけない。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CakePHPのMedia Plugin 1.3が動かない</title>
    <link href="/2010/10/12/media-plugin-1.3-not-work" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/10/12/media-plugin-1.3-not-work</id>
    <content type="html">&lt;p&gt;動かしてるサイトのCakePHPのバージョンを最新版の1.3.4に上げようと思って、Media PluginもCakePHP 1.3対応バージョンの1.3alphaにアップデートしようとした。&lt;/p&gt;

&lt;p&gt;とりあえず本体を &lt;code&gt;git clone http://github.com/cakephp/cakephp.git&lt;/code&gt; し、Media Pluginを &lt;code&gt;git clone http://github.com/davidpersson/media.git&lt;/code&gt; してみた。&lt;/p&gt;

&lt;p&gt;Media Plugin 1.3での設定方法とか調べてみようと思って、GitHub上のWikiのページを探すんだけど見つからない。なんと、作者サマはVer 1.3からWikiを消しちゃったみたい！ そんまま動かしてみたところではMedia Plugin動いてないみたい。Mediumヘルパーがないというエラーが出る。プロジェクトの中の &lt;code&gt;docs&lt;/code&gt; ディレクトリにドキュメントが格納されていたのを発見したので（&lt;a href=&quot;http://github.com/davidpersson/media/tree/1.3/docs/&quot; title=&quot;docs at 1.3 from davidpersson's media - GitHub&quot;&gt;docs at 1.3 from davidpersson’s media - GitHub&lt;/a&gt;）そこを参考にしながらMedia Plugin 0.6から1.3へのMigration作業をやったんだけど、とうとうできなかった。&lt;/p&gt;

&lt;p&gt;まず第一に、クラス名が変わってる。&lt;code&gt;Media.Medium&lt;/code&gt; だったのが &lt;code&gt;Media.Media&lt;/code&gt; になってる。Viewファイル内での変数も &lt;code&gt;$medium&lt;/code&gt; ではなく、 &lt;code&gt;$media&lt;/code&gt; になってる。そしてメソッドとかもHTML5対応とかで結構変わってるみたい。&lt;/p&gt;

&lt;p&gt;さらに、media processing 関連のクラスが分割されて別のライブラリとしてMedia Pluginの中に含まれてる（&lt;a href=&quot;http://github.com/davidpersson/mm&quot; title=&quot;davidpersson's mm at master - GitHub&quot;&gt;davidpersson’s mm at master - GitHub&lt;/a&gt;）。これが結構わかりにくい。なんかImagick必要ぽくて、本番環境じゃインストール権限ないので使えないし、結局ここで諦めてしまった。&lt;/p&gt;

&lt;p&gt;Media PluginはVer 0.6のWikiがあった頃もなんかドキュメンが見づらかったし、1.3になってドキュメントはただのテキストファイルになり、しかもメソッドについての解説がないので結局本体のコードを読むしかない。&lt;/p&gt;

&lt;p&gt;RubyのライブラリはたいていRdocとかついててドキュメントが充実してるので、あれに慣れるとドキュメントがわかりにくいライブラリやプラグインは億劫に感じてしまう。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RVMのRubyをTextMateで使う</title>
    <link href="/2010/09/15/textmate-with-rvm-ruby" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/09/15/textmate-with-rvm-ruby</id>
    <content type="html">&lt;p&gt;いやまぁテキストエディターにはいろいろあるわけでして、皆さんEmacsとかVimで日夜しこしこコードを書いておられると思うんですけど、僕はGUIしか使えない情報弱者なので主にTextMateを使ってます。&lt;/p&gt;

&lt;p&gt;TextMateで便利なのが “Run” っていう機能です。Rubyのコードを書いていて、&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; でさくっと実行結果を確認できます。いちいちTerminal開いて&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ruby hogehoge.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とか面倒くさいことをやらずにすみます。&lt;/p&gt;

&lt;p&gt;で、これからが本題なんですけど、先月Ruby 1.9.2がリリースされて、さらに &lt;code&gt;gem update&lt;/code&gt; でRails 3が入るようになってしまったので、お試しでRuby 1.9.2とRails 3を使ってみることにしました。しかし1.8系を完全に捨てることは恐ろしいので、RVMを使って複数のバージョンのRubyを切り替えながらしばらく過ごしてみることにしたわけです。&lt;/p&gt;

&lt;p&gt;上に書いたとおり僕ちゃんは情報弱者なのでTextMateに依存したコーディングライフを送っており、&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; で動くRubyもRVMのRubyにしたいと思ったのですが、これが分からなかった。RVMのサイトを見たらいろいろごちゃごちゃやり方が書いてあるんだけど（&lt;a href=&quot;http://rvm.beginrescueend.com/integration/textmate/&quot; title=&quot;RVM: Ruby Version Manager - Textmate Integration with RVM&quot;&gt;RVM: Ruby Version Manager - Textmate Integration with RVM&lt;/a&gt;）、結局この通りにやってもうまくいかず。&lt;/p&gt;

&lt;p&gt;しかし先ほどなにげなく&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rvm 1.9.2 --default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;としてあげたところ、TextMateでもRVMのRubyが走るようになりました。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScriptでClickable Mapの座標を取得する</title>
    <link href="/2010/09/02/clickable-map-coordinates-with-javascript" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/09/02/clickable-map-coordinates-with-javascript</id>
    <content type="html">&lt;p&gt;みなさん、クリッカブルマップしてますか？ あんなくそみたいなもの使って地図をつくるなんて発狂しそうなこと、ここを読みそうな人はやってないと思いますが、僕の職場のお客さんとか上司は「Google Mapsには心がこもってない」とか言うので、クソみたいイラストをクリッカブルマップにして地図を作ってるんですよ。まじでかわいそうな僕ちゃん。&lt;/p&gt;

&lt;p&gt;ご存じない方のためにクリッカブルマップの作り方を説明しておくと、まず画像を作り、それをHTMLに貼り付け、HTMLオーサリングツール（うちの職場ではDreamWeaver）のGUIエディタでちまちま画像上のクリッカブルにしたい位置を選択するという、血尿が出そうなくらい面倒くさい作業を強いられます。&lt;/p&gt;

&lt;p&gt;最悪なことにこのクリッカブルマップのあるページ、頻繁に更新依頼が来るのですよね。依頼が来る度に就業時間中の快適なネットサーフィンが妨げられるので、一発JavaScriptを書いて画像上の座標を取得することにしました。いちいちクソみたいに重いAdobe DreamWeaverとか立ち上げてられるか。&lt;/p&gt;

&lt;p&gt;コードはこんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layerY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pointX&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pointY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;path/to/image&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;position: absolute; top: auto; left: auto; width: 500px; height: 332px&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pointX&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pointX&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pointY&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pointY&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;発射！&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Firefoxでしか動作確認してないけど多分IEでは動かないと思います。ここのサイトを参考にさせてもらいました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/sandai/20091105/p1&quot; title=&quot;座標取得するプロパティのそれぞれの違い - 三等兵&quot;&gt;座標取得するプロパティのそれぞれの違い - 三等兵&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RubyKaigi 2010の感想</title>
    <link href="/2010/08/31/rubykaigi2010" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/08/31/rubykaigi2010</id>
    <content type="html">&lt;p&gt;RubyKaigi 2010に行ったのでその感想を軽く。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;自分のスペック&lt;/h4&gt;

&lt;p&gt;Rubyは使い始めて8ヶ月くらい。元々何もできなかったのでいまも初心者レベル。プレゼンテーション聞いてても分からないことが多かった。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;感想&lt;/h4&gt;

&lt;p&gt;永和システムマネジメント&lt;del&gt;永和システム&lt;/del&gt;さんの「&lt;a href=&quot;http://rubykaigi.org/2010/ja/events/23&quot; title=&quot;日本Ruby会議2010, 8月27日〜29日&quot;&gt;Head First ふつうのシステム開発&lt;/a&gt;」は面白かった。プログラミングのやり方を人から教わったことがないので、普通の会社はこうやって開発してるんだってのが分かった。テストの様子を見られて参考になった。あとVimがすごくカスタマイズしてあってすごかった。用事があって途中までしか見られなかったのが残念。&lt;/p&gt;

&lt;p&gt;MongoDBについてのプログラム（&lt;a href=&quot;http://rubykaigi.org/2010/ja/events/73&quot; title=&quot;Practical Ruby Projects with MongoDB&quot;&gt;Practical Ruby Projects with MongoDB&lt;/a&gt;）で、気にはなっていたけどよく分からなかったMongoDBのことがより一層気になった。情報の連結とかそういうコムズイことはSQLでやるんじゃなくてプログラム側でやるべき、ってことなのかな。&lt;/p&gt;

&lt;p&gt;クックパッドのセッションも見学した。CTO氏が質疑応答で「専属デザイナーはいなくてデザインもできるプログラマーがデザインやってる」って言ってたのにびっくりした。大規模サービスをやってたら負荷分散のテクニックとか参考になったかもだけど、自分が作ってるサイトは多くても5000UU/日くらいなので「ふーん」という感じで聞いてた。&lt;/p&gt;

&lt;p&gt;東京とつくばの移動に時間がかかったこと、他にも予定があったこと、帰りの飛行機の都合、などなどであまりゆっくり参加できなかったのが残念だったです。28日は用事があったので基調講演見られないから生Matzを拝むの諦めてたけど、Jeremy Kemperの基調講演がキャンセルになったかわりにトークセッションがあってて、そこにMatzも登場しててRubyの教祖を拝めたのでまぁ良かったと思います。あとジュンク堂RubyKaigi支店でで技術書買いすぎて散在した！&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2010年9月26日修正&lt;/h4&gt;

&lt;p&gt;すみません、永和システムマネジメントさんのことを「永和システムさん」と書いてました。はてブのコメント欄で角谷さんに指摘されてた！&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>MacPortsからHomebrewに移行しつつある</title>
    <link href="/2010/08/31/macports-is-deprecated" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/08/31/macports-is-deprecated</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://give-me-money.g.hatena.ne.jp/cxx/20100802/1280760811&quot; title=&quot;MacPortsからHomebrewに移行した - cxxの日記 - give-me-moneyグループ&quot;&gt;シャレオツプログラマーはみんなMacPortsからHomebrewに移行しつつあるっぽい&lt;/a&gt;ので、真似してみることにした。&lt;/p&gt;

&lt;h3 id=&quot;homebrew&quot;&gt;なんでHomebrew？&lt;/h3&gt;

&lt;p&gt;そもそもなんでみんな移行するのか？ なんかMacPortsはバッドノウハウの塊らしい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/hitode909/status/18526396749&quot; title=&quot;Twitter / シャブ山シャブ彦: MacPortsはバッドノウハウの集合だったから，他 ...&quot;&gt;Twitter / シャブ山シャブ彦: MacPortsはバッドノウハウの集合だったから，他 …&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MacPortsの何がバッドノウハウなのかちょっとよく分からなかったんだけど、でもよく考えてみたらMacPortsは &lt;code&gt;.bash_profile&lt;/code&gt; とか &lt;code&gt;.zshrc&lt;/code&gt; とかにへんてこりんなパスを埋め込まないといけないし、PerlとかRubyは一行目に&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とか &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とか書くのに使ってるバイナリ本体は &lt;code&gt;/opt/local/bin/&lt;/code&gt; にあるとかは気持ち悪いっちゃ気持ち悪い。&lt;/p&gt;

&lt;p&gt;HomebrewはLinuxのパッケージ管理ソフトみたいに &lt;code&gt;/usr/local/bin/&lt;/code&gt; とかに何でもインストールするので精神衛生上ベターだ。&lt;/p&gt;

&lt;p&gt;Homebrewのインストール自体はとても簡単。パッケージ管理スクリプトをRubyで書くってのも、UNIXのことよく分かってない僕にはなかなかよいかもしれない。詳しいことは公式Wikiとかを見て下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mxcl.github.com/homebrew/&quot; title=&quot;Homebrew — MacPorts driving you to drink? Try Homebrew!&quot;&gt;Homebrew — MacPorts driving you to drink? Try Homebrew!&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;Vimのインストールではまった&lt;/h3&gt;

&lt;p&gt;Homebrew自体は簡単に入った。試しにVimをAppleがコンパイルしたVersion 7.2のものから新しめの7.3に上げて、ついでにRubyオプション入りでコンパイルしたかったので&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; brew install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してみた。しかしながら&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Error: No available formula for vim&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と出た。GUI版のMacVimはFormulaパッケージがあるらしいけど、フツーのVimはないらしい。「えー、自分でFormulaファイルを書かなきゃいけないの〜？」って感じだったんだけど、GitHubでテケトーに検索したらいろいろ出てきたので、 &lt;code&gt;/usr/local/Library/Formula/&lt;/code&gt; に &lt;code&gt;vim.rb&lt;/code&gt; を作ってコピペした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/adamv/homebrew/blob/duplicates/Library/Formula/vim.rb&quot; title=&quot;Library/Formula/vim.rb at duplicates from adamv's homebrew - GitHub&quot;&gt;Library/Formula/vim.rb at duplicates from adamv’s homebrew - GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そんで今度は意気揚々と&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; brew install vim
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してみたんだけど、なんとmakeに失敗する。Python.frameworkを参照してるときにエラーが出てるっぽい。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;ld: warning: in /Library/Frameworks//Python.framework/Python, missing required architecture x86\_64 in file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Appleが配布したのではないPythonを使ってるとこういうエラーが出るとかなんとか外人が言ってる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vim.1045645.n5.nabble.com/Python-link-errors-td1214971.html&quot; title=&quot;Nabble - Vim - Mac - Python link errors&quot;&gt;Nabble - Vim - Mac - Python link errors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要するに64bit版のPython.frameworkを入れれば良さそうだった。何も考えずにHomebrewで &lt;code&gt;brew install Python&lt;/code&gt; とかやって &lt;code&gt;/usr/local/bin/python&lt;/code&gt; に新しいPythonを入れてみたりしたんだけど、これは意味なかったっぽい。大人しくPython公式サイトからPython 2.7のインストーラーパッケージをダウンロードしてきてGUIでインストールした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.python.org/download/releases/&quot; title=&quot;Releases&quot;&gt;Releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;その後、もう一度 &lt;code&gt;brew install vim&lt;/code&gt; をしてみたところ、無事make完了。&lt;code&gt;vim --version |grep ruby&lt;/code&gt; で&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;+ruby&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;となった。&lt;/p&gt;

&lt;p&gt;まだApacheとかRubyGemsとかはMacPorts版を使っているけど、割と早い段階でHomebrewに移行して、シャレオツプログラマーの仲間入りをしようと思います。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Naughty BoyなのでCakePHPのDBもRailsのActiveRecordを単体で使って操作してやった</title>
    <link href="/2010/08/25/naughty-boy-am-i" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/08/25/naughty-boy-am-i</id>
    <content type="html">&lt;p&gt;80個近くある静的HTMLファイルをシステム化する必要が生じたので、HTMLをHpricotでスクレイピングしたあと、抽出したデータをSQLiteにぶっ込んだ。しかしSQLiteにぶっ込んだあとでデータの一部をいじりたくなった。そこでRailsのActiveRecordを単体で使ってみた。&lt;/p&gt;

&lt;h3 id=&quot;activerecord&quot;&gt;なんでわざわざActiveRecordを使うのか&lt;/h3&gt;

&lt;p&gt;いやそりゃもちろんSQL書くのが怖いからですよ。というのは半分冗談なんですけど、CakePHPはSQLite 2にしか対応しておらず、SQLite 2は何かと制限が多い。replace関数が使えんとか。temp tableとか作るのかったるいし、フレームワークばっかり使っててSQLはあんまりよく分からないのでActiveRecordを使った次第です。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;作業詳細&lt;/h3&gt;

&lt;p&gt;このシステム化するプロジェクト自体はCakePHPで動いており、DBはSQLite2。デフォの状態だとRailsは &lt;code&gt;sqlite3-ruby&lt;/code&gt; しかインストールしないので、ActiveRecordからSQLite2なDBを操作することができず若干まいっちんぐだったんだけどなんとかでけた。ちなみにやったのはCRUDのReadとUpdateね。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;やったこと&lt;/h4&gt;

&lt;p&gt;とりあえず以下のようなファイルを用意。各レコードの &lt;code&gt;name&lt;/code&gt; フィールドの “hogehoge” という部分なのが邪魔なので削りたかった。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rubygems&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sqlite&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;active_record&amp;quot;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;establish_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sqlite&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;path/to/db&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hoge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hoges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hoges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/hogehoge/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;まず最初に、 &lt;code&gt;no such file to load -- sqlite&lt;/code&gt; みたいなエラーが出た。要するに「お前SQLite 2のアダプター入れてねえだろ」というエラー。とりあえず &lt;code&gt;sudo gem install sqlite-ruby&lt;/code&gt; したんだけど、それでも &lt;code&gt;no such file to load — sqlite&lt;/code&gt; が出るのでMacを再起動したら「Rails 3ではSQLite 2はdeprecatedだからさっさとSQLite 3に移行しろや」みたいなメッセージは出るもののちゃんとDBの内容を読み込めた。CRUDのReadはでけた。&lt;/p&gt;

&lt;p&gt;しかしUpdateの部分で失敗。Railsの感覚で &lt;code&gt;hoge.save&lt;/code&gt; とかやったんだけどこれは意図したとおりに機能しなかった。しょうがないのでRailsのAPIリファレンスを見ながら、 &lt;code&gt;update_attribute()&lt;/code&gt; というメソッドをぶちかましてやった。こんな感じ。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;hoges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/hogehoge(.*)/&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これで狙ったことができました。&lt;/p&gt;

&lt;p&gt;Rubyいいわー。ほんといいわー。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Pygmentsを使ってコードをシンタックスハイライトするようにした</title>
    <link href="/2010/08/13/jekyll-with-pygments" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/08/13/jekyll-with-pygments</id>
    <content type="html">&lt;p&gt;外タレのJekyllブログを見てると、シャレオツな感じでコードがシンタックスハイライトされてる。どうもPygmentsというやつを使うらしい。公式Wikiでも触れられていて、コードをハイライトさせたいときは &lt;code&gt;jekyll --pygments&lt;/code&gt; しろや、みたいなことが書いてあるんだけど（&lt;a href=&quot;http://wiki.github.com/mojombo/jekyll/liquid-extensions&quot; title=&quot;Liquid Extensions - jekyll - GitHub&quot;&gt;Liquid Extensions - jekyll - GitHub&lt;/a&gt;）、そういうオプションつけてもコードは全然色つきにならず、「サギやんけ」とか思ってた。&lt;/p&gt;

&lt;p&gt;しかしマニュアルをよく読むと、PygmentsってのはPython製のソフトで、こいつを別途インストールする必要があるらしい。なるほどそういうことだったのか。そういうわけで&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  $ port search pygments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してみたところ、MacPortsでは三つヒットした。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  py-pygments @1.0 (python, devel)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      Python syntax highlighter&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  py25-pygments @1.0 (python, devel)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      Python syntax highlighter&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  py26-pygments @1.3.1 (python, devel)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      Python syntax highlighter&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Found 3 ports.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;しかしSnow LeopardにはPython 2.6.1が入ってるので、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  $ easy_install Pygments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;でもオッケーかも知れない。僕は職場に持ち込んでMacBookにはMacPortsから &lt;code&gt;py26-pygments&lt;/code&gt; を入れた。そしたらdependencyが発動してPythonとかXorg何とかというもののダウンロードも始まり、 &lt;code&gt;/opt/local/bin/&lt;/code&gt; に &lt;code&gt;python-2.6.5&lt;/code&gt; が入ったが、長々と時間がかかった。&lt;sup&gt;&lt;a href=&quot;#footnote-34-1&quot;&gt;※1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;インストール完了後、これでシャレオツシンタックスハイライティングできるようになったと思い、意気揚々と&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  $ jekyll --pygments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してみたのだが、一向にハイライトされない。なんか「pygmentizeとか見つからないし」みたいなエラーが出る。なんでじゃ〜とイライラしながら公式Wikiを読んでると、次のような記述があった。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the pygmentize binary must be in your path&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そうなのよ。 &lt;code&gt;pygmentize-1.3.1&lt;/code&gt; っていうバイナリファイルはあってパスは通ってるんだけど、 &lt;code&gt;pygmentize&lt;/code&gt; そのものがないのよ。そういうわけで&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  $ sudo ln -s /opt/local/bin/pygmentize-1.3.1 /opt/local/bin/pygmentize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してやった。すると &lt;code&gt;pygmentize&lt;/code&gt; というバイナリファイルにパスが通るので、めでたくシャレオツシンッタクスハイライティング環境が手に入った。ちなみにCSSは&lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/css/syntax.css&quot; title=&quot;syntax.css&quot;&gt;Github互換のもの&lt;/a&gt;を拾ってきて入れといた。&lt;/p&gt;

&lt;hr /&gt;

&lt;p id=&quot;footnote-34-1&quot;&gt;※1 この記事を書いている自宅のMacBook Proには `sudo easy_install Pygments` で入れてみたが、一瞬でインストール完了した。またシンボリックリンクを貼る手間とか必要なく、インストールしただけでパスも通ってた。そういうわけなのでMacPorts経由のインストールはオヌヌメしませんです。よい子のみなさんは `easy_install` しちゃいましょう。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>AuthlogicとAuthlogic-OAuthで詰まってる</title>
    <link href="/2010/08/12/fed-up-with-authlogic-oauth" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/08/12/fed-up-with-authlogic-oauth</id>
    <content type="html">&lt;p&gt;AuthlogicとAuthlogic-OAuthでキメてやろうと思ってたのに全然うまくいかないし。Authlogic-OAuth、去年から全然更新されてないじゃん。Railsは便利なプラグインいっぱいあるけど、メンテが止まってることも多い。プラグインに頼りまくってサイト作ってると死ぬこともあるなーと思った。やりたいことは自分でもやれるようにしとく必要あるし、自分の手に余ることはやろうとしない方がいいと思った。できるところからコツコツと、と37シグナルズの本にも書いてあるし。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Ubuntu ServerにSSH接続しようとして "Permission denied (publickey)." が出る</title>
    <link href="/2010/08/03/ubuntu-server-ssh-connection-failing" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/08/03/ubuntu-server-ssh-connection-failing</id>
    <content type="html">&lt;p&gt;NECの安サーバーを買ってサーバーを作ってるんですけど、SSHでエラーが出て困ってます。OSはUbuntu Server 10.04.1 LTS。&lt;/p&gt;

&lt;p&gt;まずSSHのおさらいを。クライアント側で&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir -p .ssh
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ssh-keygen -t rsa （以下略）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;したのち、サーバー側の &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; の &lt;code&gt;PasswordAuthentication&lt;/code&gt; を &lt;code&gt;on&lt;/code&gt; にし、パスワードでSSH接続できるようにして&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; scp id_rsa.pub username@hoge.com:.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;するか、あるいはUSBフラッシュメモリで鍵をサーバーに移す。その後サーバー側で &lt;code&gt;.ssh/&lt;/code&gt; と &lt;code&gt;.ssh/authorized_keys&lt;/code&gt; のパーミッションをそれぞれ700と600に変えてあげるわけですよね。&lt;/p&gt;

&lt;p&gt;いっぺんクライアント側で &lt;code&gt;id_rsa.pub&lt;/code&gt; を作ってたらそれ以降は単純にこれを接続先のサーバーにコピーしてあげればおｋ。ここまで合ってますかね？&lt;/p&gt;

&lt;p&gt;前から使ってる職場内だけで使うサーバーにも同じUbuntu Serverを入れてるんですけど、こっちでは全くトラブルがない。それなのに新しいサーバーでは&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Permission denied (publickey).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;というエラーが頻繁にお出になるのですよ。&lt;/p&gt;

&lt;p&gt;しかしこのエラー、常に出る訳じゃないんですね。サーバーを直接操作して&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo /etc/init.d/ssh restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してあげると消える訳ですね。そんでしばらくクライアントからSSHで接続したり切断したりを繰り返していると、あるとき突然、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Permission denied (publickey).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;となるわけです。まじでストレスフル。つか、このサーバーは公開用に使うものなので、こんな感じでSSHが不安定だとかまじで困るんですけど。&lt;/p&gt;

&lt;p&gt;前述の &lt;code&gt;PasswordAuthentication&lt;/code&gt; を &lt;code&gt;on&lt;/code&gt; にしとけば、公開鍵認証に失敗した後もパスワードで認証することができるんですが、パスワード認証はなんだか怖いので使いたくないのですよね。どいうしたものか。&lt;/p&gt;

&lt;p&gt;ググったらSSHのプロトコルを1と2併用にしたら解決するという情報が出てきたのですけど、これやったら “Disabling protocol version 1. Could not load host key” というエラー？が出てしまったので多分僕の環境では意味なし。「RSAキーやめてDSAにしたらエラーでなくなった」（&lt;a href=&quot;http://miyazaki.ddo.jp/mt3/blog/zaurus/20060405-2343.html&quot; title=&quot;ぷらぷらブログ \| OpenSSH を導入。接続に四苦八苦！&quot;&gt;ぷらぷらブログ | OpenSSH を導入。接続に四苦八苦！&lt;/a&gt;）という情報もあるけど面倒くさいのでまだ試していません。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>増田のRSSをRubyのRSS:ParserでParseしようとしたけどやらせてもらえなかったのでHpricotを使った話</title>
    <link href="/2010/07/27/masuda-san" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/27/masuda-san</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://twitter.com/ningengasinu&quot;&gt;@ningengasinu&lt;/a&gt; 様みたいに、自分で作ったボットに「日記書いた」ってしゃべらせようと思って、増田のRSSを使わせてもらおうと思ったんだけど、Rubyの &lt;code&gt;RSS::Parser&lt;/code&gt; で読み込もうとすると &lt;code&gt;500 Internal Server Error&lt;/code&gt; が返ってきてしまう。ブラウザから読み込むときはエラーとか出ないんだけど。&lt;/p&gt;

&lt;p&gt;しょうがないので &lt;code&gt;open-uri&lt;/code&gt; を使って &lt;code&gt;User-Agent&lt;/code&gt; を偽装してRSSを読みに行ったところ、正しくレスポンスが返された。しょうがないので &lt;code&gt;RSS::Parser&lt;/code&gt; は使わず、 &lt;code&gt;Hpricot&lt;/code&gt; を使った。&lt;/p&gt;

&lt;p&gt;増田ってbotのアクセス弾いてるわけですね。これがネットの闇ですか……&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tokyo Tyrantでvalueに配列を保存したらダメなのかしら</title>
    <link href="/2010/07/26/trial-with-tokyo-tyrant" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/26/trial-with-tokyo-tyrant</id>
    <content type="html">&lt;p&gt;tilyさんのgist&lt;a href=&quot;http://gist.github.com/427398&quot; title=&quot;gist: 427398&quot;&gt;gist: 427398&lt;/a&gt;を使わせてもらってTwitterのボットを何個か作ってみた。結構楽しいですね。&lt;/p&gt;

&lt;p&gt;しかしボットが短時間に何度も同じ発言を繰り返してフバいので、日付が変わるまでは重複発言をしないようにしてみようと思った。Rubyは 配列 - 配列 みたいなエロいことができるみたいなので、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;new_tweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neta_tweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used_tweets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とかしてみようとした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gist.github.com/427398&quot; title=&quot;gist: 427398&quot;&gt;gist: 427398&lt;/a&gt;自体がTokyo Tyrantを使っているので、これでなんとか出来ないかなと思った。しかし &lt;code&gt;rdb.put&lt;/code&gt; しようとすると、 &lt;code&gt;ArgumentError&lt;/code&gt; というのが発生してしまう。ひょっとしたらTokyo Tyrantって配列とかを保存するもんじゃないのかな。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>oauth-pluginではまった</title>
    <link href="/2010/07/15/get-stuck-with-oauth" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/15/get-stuck-with-oauth</id>
    <content type="html">&lt;p&gt;OAuthを導入しようとした。Twitterのだけなら何とか拾ってきたコードで動くとこまで持ってけてたけど、どうせやるならいろんなOAuth Providerに対応したい。oauth-pluginってgemを使えば簡単に沢山のOAuth Providerに対応できるみたいなので導入しようとしたけど、これがくせ者だった。&lt;/p&gt;

&lt;p&gt;まずoauthとoauth-pluginをただ入れるだけじゃ動かない。 &lt;q&gt;acts_as_authenticated, restful_authentication  or restful_openid_authentication&lt;/q&gt; というプラグインが入ってて、ユーザー認証をこれらのgemに任せてないとダメ。&lt;/p&gt;

&lt;p&gt;作者がrestful_authenticationをすすめてたのでこれを導入した。（usersテーブルの構造自体が変わるので、ただ単にインストールするだけじゃなくて &lt;code&gt;rake db:drop&lt;/code&gt; して古い &lt;code&gt;db/migrate/(日付)_create_users.rb&lt;/code&gt; を削除し、もう一回 &lt;code&gt;rake db:migrate&lt;/code&gt; しないといけない。さらにControllerとかViewとかもいじらなきゃいけないので地味に結構面倒くさい。&lt;/p&gt;

&lt;p&gt;しかし何度やってもうまくいかない。「 &lt;code&gt;login_required&lt;/code&gt; みたいなメソッドねーし」とかエラーが出る。どうやら昔の restful_authentication にはそういうメソッドがあったらしんだけど、現在の restful_authentication からは削除されてるらしい。他にも &lt;code&gt;current_user&lt;/code&gt; っていうのも未定義で、この辺のエラーのおかげで完全に萎えた。&lt;/p&gt;

&lt;p&gt;そういうわけで一週間くらいOAuth対応に向けて頑張ってたけど諦めました。TwitterだけOAuth認証に挑戦してみる。とってきたOAuth Tokenの扱いとかに若干不安があるけどうまくいくかしら。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Gitのhookを使ってDreamhost上のJekyllに記事を公開</title>
    <link href="/2010/07/14/deploy-with-git-hook" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/14/deploy-with-git-hook</id>
    <content type="html">&lt;p&gt;やってみた。以下を参考にした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.taknado.com/en/2009/03/26/deploying-a-jekyll-generated-site/&quot;&gt;Deploying a jekyll generated site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これもうむかし.macとかについてたiBlogとかわらんわ。GUIのクライアントはないけど、VimとかCodaとか好きなエディタ（TextMateで日本語がネイティブに扱えたらなー）で記事書いて、gitで &lt;code&gt;git push&lt;/code&gt; するだけ。&lt;/p&gt;

&lt;p&gt;で、やり方なんですけどちょっとgitに慣れてない人には複雑かもしれない。三つgitのリポジトリを用意する必要がある。&lt;/p&gt;

&lt;p&gt;まず記事を作成するパソコンでgitとjekyllのセットアップをしたあと、リポジトリを作る（リポジトリ1）。その後Dreamhostの公開ディレクトリでないところに空のリポジトリを作る（ &lt;code&gt;git --bare init&lt;/code&gt; ）。ここでは &lt;code&gt;blog.git&lt;/code&gt; という名前にしましょう（リポジトリ2）。そんでそこにリポジトリ1をpushする。その後リポジトリ2の &lt;code&gt;/blog.git/hooks/&lt;/code&gt; に &lt;code&gt;post-update&lt;/code&gt; というファイルを作り、以下のように書く。ファイルに実行可能なアクセス権を与えることを忘れずに。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;#! /bin/sh&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;GIT_DIR &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/tech.portalshit.net/ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git pull
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;そんでもって &lt;code&gt;git clone blog.git &amp;lt;公開用のディレクトリ名&amp;gt;&lt;/code&gt; する（リポジトリ3）。リポジトリ1から公開用ディレクトリにリポジトリがコピーされるので、この中に含まれる &lt;code&gt;_site&lt;/code&gt; というディレクトリを panel.dreamhost.com で公開ディレクトリとして設定すると、&lt;code&gt;git push&lt;/code&gt; する度にhookが発動されて、めでたく記事が公開されるという次第です。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;まとめると、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;記事を作成するローカルリポジトリ&lt;/li&gt;
&lt;li&gt;ローカルリポジトリをpushするリモートリポジトリ&lt;/li&gt;
&lt;li&gt;リモートリポジトリをcloneする公開用リポジトリ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の三つが必要なことを忘れないようにしてくだしあ。&lt;/p&gt;

&lt;p&gt;これであなたもハイド博士だ！&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>OAuthがwakaranai</title>
    <link href="/2010/07/09/cant-live-up-with-oauth" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/09/cant-live-up-with-oauth</id>
    <content type="html">&lt;p&gt;RailsでOAuthを使ってTwitterとかで認証させたい。oauth-pluginを使おうとしてるけど全然うまくいかない。イメージとしてはこんな感じ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://tech.portalshit.net/images/27-oauth.png&quot; alt=&quot;OAuthの利用イメージ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;疑問点がいくつかある。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Userモデルで &lt;code&gt;validate_presence_of&lt;/code&gt; をパスワードフィールドにかけてるけど、OAuth経由でユーザーが追加されたときはどうすればいいんだろう。OAuth経由ではパスワードは預からないので、 &lt;code&gt;validate_presence_of&lt;/code&gt; でエラーが出るはず。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Userモデルで &lt;code&gt;has_many :oauth_tokens&lt;/code&gt; とかリレーションの設定をしてしまったとして、OAuth経由ではなく普通にサインアップしたユーザーの扱いはどうなるんだろう？ 「 &lt;code&gt;oauth_tokens&lt;/code&gt; にそんな &lt;code&gt;user_id&lt;/code&gt; の人いないし」みたいなエラーが出るような気がする。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他にもいろいろ気になる点があったような気がするけど分からなくなってしまった。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Vimで編集を終了した後、元のコンソールの状態を復元したい</title>
    <link href="/2010/07/07/finish-editing-then-restore-console" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/07/finish-editing-then-restore-console</id>
    <content type="html">&lt;p&gt;FreeBSDでVimを起動しファイルを編集したあと、 &lt;code&gt;:q&lt;/code&gt; でVimを終了させてるのに元のコンソールに戻らなくてなんか嫌だなーと思っていた。MacもUbuntuもDreamHostのDebianもVimを閉じると元に戻るのに、職場の本番環境のFreeBSDだけこれなの。ファイル編集前のコンソールの履歴とかを見たいこともあるので、Vimが終了したら元の画面に戻るようにしたいと随分長いこと思っていたんだけど、たったいまようやく出来たのでメモっときます。&lt;/p&gt;

&lt;p&gt;ちなみにVimには &lt;code&gt;restorescreen&lt;/code&gt; とかいうオプションがあるらしく、必死で.vimrcにこの設定を書いてたけど、これはなんかWindowsのVim専用のオプションらしいのでマカーやUNIXユーザーの方はこれを設定しても無駄です。&lt;/p&gt;

&lt;p&gt;情報元は &lt;a href=&quot;http://d.hatena.ne.jp/lurker/20061118/1163810847&quot; title=&quot;フルスクリーンアプリを終了したときに元のコンソールの状態に復元する - 技術メモ帳&quot;&gt;フルスクリーンアプリを終了したときに元のコンソールの状態に復元する - 技術メモ帳&lt;/a&gt; というページ。&lt;/p&gt;

&lt;p&gt;FreeBSDの場合、 &lt;code&gt;/etc/termcap&lt;/code&gt; ってのの中にフルスクリーンアプリを終了したときにコンソールに戻るかどうかを設定する場所があって、こいつを変更すればよいらしい。&lt;/p&gt;

&lt;p&gt;しかし自分はこのサーバーでroot権限を持ってない。なので &lt;code&gt;cp /etc/termcap ~/.termcap&lt;/code&gt; したあと &lt;code&gt;chmod 644 ~/.termcap&lt;/code&gt; して &lt;code&gt;vim ~/.termcap&lt;/code&gt; し、自分の使ってるターミナルの環境に合わせて設定を変更してやるとOK。&lt;/p&gt;

&lt;p&gt;僕の場合はMacの純正ターミナルを、シェルはzshで使っている。 &lt;code&gt;echo $TERM&lt;/code&gt; してみると &lt;code&gt;xterm-color&lt;/code&gt; と表示されるのでxterm-colorの設定が書いてあるところをいじった。&lt;/p&gt;

&lt;p&gt;くわしくは上のリンク先を見てもらうといいんだけど、とにかく &lt;code&gt;te&lt;/code&gt; ってのと &lt;code&gt;ti&lt;/code&gt; ってのがあって、これをMacの場合は &lt;code&gt;te=\E7\E[?47h&lt;/code&gt; 、 &lt;code&gt;ti=\E[2J\E[?47l\E&lt;/code&gt; としてあげればいい。そんでシェルの設定ファイルに &lt;code&gt;export $TERMPATH=$HOME/.termcap&lt;/code&gt; と書いてやり、一端ログアウトして再ログインするとめでたくVimを終了したときにコンソールが復元されるようになります。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CakePHP 1.2から1.3への移行の個人的メモ</title>
    <link href="/2010/07/07/cakephp1.3-migration-tips" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/07/cakephp1.3-migration-tips</id>
    <content type="html">&lt;p&gt;CakePHPで動かしているサイトをCakePHP 1.2ベースからCakePHP 1.3ベースに変更作業中。その課程で気がついたことをメモしておきます。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;$html-&amp;gt;link()&lt;/code&gt; などHTMLヘルパーでエスケープを &lt;code&gt;false&lt;/code&gt; にしたいときは &lt;code&gt;$options['escape']&lt;/code&gt; を使う。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$cakeDebug&lt;/code&gt; は廃止されたのでエラーが出る。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$sessions-&amp;gt;flash()&lt;/code&gt; は &lt;code&gt;echo $sessions-&amp;gt;flash()&lt;/code&gt; とする必要がある。また AppController でヘルパーとして呼び出さなければならない。&lt;/li&gt;
  &lt;li&gt;debug_kit は github から最新版を &lt;code&gt;git clone&lt;/code&gt; する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参照:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://book.cakephp.org/ja/view/1561/Migrating-from-CakePHP-1-2-to-1-3&quot; title=&quot;1.2から1.3への移行ガイド :: 付録 :: マニュアル :: 1.3コレクション :: The Cookbook&quot;&gt;1.2から1.3への移行ガイド :: 付録 :: マニュアル :: 1.3コレクション :: The Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>YAMLで初期データをRailsアプリケーションのDBにぶっ込む</title>
    <link href="/2010/07/02/import-initial-data-with-yaml" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/02/import-initial-data-with-yaml</id>
    <content type="html">&lt;p&gt;初期データをマイグレーションでRailsアプリケーションにぶっ込んでみた。後からいちいち手入力するのめんどいし、マイグレーションでデータをロードしとけば、本番環境でうごかすときも &lt;code&gt;rake db:migrate&lt;/code&gt; で初期データは入るはずだから楽ちんかなと思って。&lt;/p&gt;

&lt;p&gt;結果的には無事データをロード出来たんだけど、YAMLの書式が分かってなくて、結局丸一日時間を費やしてしまった。大したデータ量じゃなかったから下手するとちまちま手入力するのと変わらないくらい時間かかったかも。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#アイテムの名前&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ホゲ県ホゲ村ホゲホゲ&amp;quot;&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;fuga&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ホゲ県ホゲ村フガフガ&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とかやんなきゃいけなかったんだけど、YAMLの書き方が分かってなくて、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ホゲ県ホゲ村ホゲホゲ&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ホゲ県ホゲ村フガフガ&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とか書いてた。どっちも hoge県 に分類されるんでこんなんでいいだろ、みたいなノリ。しかしこれはやっぱり文書の構造がおかしい。これをロードしてみると、 id=2 のものしかロードされなかった。&lt;/p&gt;

&lt;p&gt;結局、拾ってきた	コードを参考にして&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pp&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hoge.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;みたいなやつを書いて、読み込まれる配列の構造を確認しながらYAMLを書いたところうまくいった。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Active Recordが難しすぎてしょんべんちびりそう</title>
    <link href="/2010/07/02/active_record-is-so-sticky-for-me" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/07/02/active_record-is-so-sticky-for-me</id>
    <content type="html">&lt;p&gt;『RailsによるアジャイルWebアプリケーション開発 第三版』をまだちまちま読んでる。いまActiveRecordのリレーションシップのところ。全然分からなくて全然進まない。もうRails 3.0が出そうだというのに。またろくすっぽ技術書を読まないうちに化石になっちゃいそうだよ。バカはつらいよ。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>インスタンス変数</title>
    <link href="/2010/06/28/i-had-better-review-ruby" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/28/i-had-better-review-ruby</id>
    <content type="html">&lt;p&gt;一個前の記事（&lt;a href=&quot;http://tech.portalshit.net/2010/06/25/i-realized-php-is-crap/&quot; title=&quot;Rubyがエレガントだって言われるのがわかってきたような気がする \| tech.portalshit.net - CakePHP, Rails, JavaScript&quot;&gt;Rubyがエレガントだって言われるのがわかってきたような気がする | tech.portalshit.net - CakePHP, Rails, JavaScript&lt;/a&gt;）をcxxさんに添削してもらったところ、Rubyの方のコードには問題があったらしい。Rubyでは変数を宣言だけして終わりみたいな初期化をしちゃダメだそうで、必ず何かを代入しないといけないらしい。&lt;/p&gt;

&lt;p&gt;そういうわけで正しくは、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hoge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hoge&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hogehoge&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書くそうです。&lt;/p&gt;

&lt;p&gt;ところでなんで自分は前回、 &lt;code&gt;@a&lt;/code&gt; というインスタンス変数を使ったのかがよく分からない。Railsでコードを書いていて、Controllerで定義した変数をViewで使うときにインスタンス変数を使うので、そういう風に思い込んでいるのかな。上のコードでは別にインスタンス変数を使う必要はなくて、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hoge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hoge&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hogehoge&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;でも同じ結果を出力しますね。&lt;/p&gt;

&lt;p&gt;インスタンス変数と普通の変数の違いが分かってなかったので、たのしいRuby（第2版）を開いて復習してみたところ、以下のような記述があった。（たのしいRuby 第2版 pp.123-124）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;@&lt;/code&gt; で始まる変数は &lt;em&gt;インスタンス変数&lt;/em&gt; といいます。ローカル変数とは違って、このメソッドを抜けてもその値は保存されますが、インスタンスごとに違う値を割り当てられる変数です。（たのしいRuby 第2版 pp.123-124）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なるほど！ 例えば上のコードを引数つきのものに改造したとしましょう。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hoge&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hoge&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Fuga&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;piyo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Piyo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;piyo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;で、これを実行すると&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;Fuga&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Piyo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と表示される。こんな感じで、一つのクラスから複数のインスタンスを生成するときに使うのがインスタンス変数って理解でオーケーなのかなと思います。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Rubyがエレガントだって言われるのがわかってきたような気がする</title>
    <link href="/2010/06/25/i-realized-php-is-crap" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/25/i-realized-php-is-crap</id>
    <content type="html">&lt;p&gt;「PHPは汚い、Rubyはきれい」とかそういう言説の意味が昔は分からなかったんだけど、昨日今日、久々にCakePHPで作ったサイトのメンテナンスをしてて「PHP、確かにきちゃないわ」と思った。&lt;/p&gt;

&lt;p&gt;オブジェクト指向っぽい何がしかのコードをPHPで書いてみる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hoge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hogehoge&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$fuga&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fuga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hoge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot; /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;つぎにRubyで同じコードを書いてみる。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hoge&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hoge&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hogehoge&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hoge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuga&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hoge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;まずPHPは中括弧たくさん書かないといけない。これが面倒くさい。中括弧はキーボードでは &lt;code&gt;shift + [&lt;/code&gt; とか &lt;code&gt;shift + ]&lt;/code&gt; とかだから、 &lt;code&gt;shift&lt;/code&gt; の分だけキーボードをたたく回数が増える。実にめんどい。最初はRubyのインデントでブロックを表現するところに慣れなかったけど、慣れたらちまちま中括弧をかかないとダメなPHPにいらいらするようになった。中括弧の閉じ忘れでエラーが出ることとかも多いし。&lt;/p&gt;

&lt;p&gt;さらにメソッドとか変数へのアクセスもめんどい。Rubyだと &lt;code&gt;.&lt;/code&gt; でアクセスできるのに、PHPだと &lt;code&gt;-&amp;gt;&lt;/code&gt; だ。入力するときはキーボードに &lt;code&gt;-&lt;/code&gt; と &lt;code&gt;shift + .&lt;/code&gt; と打たなきゃいけない。アホか。Rubyだとキーを一個打つので済むのが、PHPだと三個だ。&lt;/p&gt;

&lt;p&gt;他にも予約語が長いとか、変数のスコープがおかしいんじゃねとか、Rubyを触る前は分からなかったPHPの変態的なところが目につくようになってきた。&lt;/p&gt;

&lt;p&gt;PHPちゃん、僕もう疲れたよ（特にCakePHPの配列地獄）。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RailsアプリケーションでMarkdownを使う</title>
    <link href="/2010/06/23/how-to-use-markdown-with-rails" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/23/how-to-use-markdown-with-rails</id>
    <content type="html">&lt;p&gt;RailsアプリケーションでMarkdownを使いたと思った。（Markdown大好きっ子なので）&lt;/p&gt;

&lt;p&gt;調べてみたところ、 &lt;a href=&quot;http://deveiate.org/projects/BlueCloth&quot; title=&quot;BlueCloth&quot;&gt;BlueCloth&lt;/a&gt; というライブラリを使うといいらしい。&lt;/p&gt;

&lt;p&gt;これはRailsのプラグインではないのでgemでインストール。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo gem install bluecloth
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;その後viewで&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;rhtml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;markdwon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とか書けばいい。&lt;/p&gt;

&lt;p&gt;しかしなんも設定しない状態だとRailsアプリケーションはBlueClothを読み込まないので、config/environment.rbに&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bluecloth&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書いてやる。するとめでたくMarkdownが使えるようになる。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>XREAにRubyGemsをインストール</title>
    <link href="/2010/06/22/installed-rubygems-on-xrea" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/22/installed-rubygems-on-xrea</id>
    <content type="html">&lt;p&gt;XREAでRailsを使おうと思っていろいろ調べてみた。Railsは &lt;code&gt;rake rails:freeze:gems&lt;/code&gt; してアップロードすればオッケーらしいんだけど、RubyGemsはインストールしないといけないみたい。ところがネットに乗ってる情報を参考にインストールしてみたけど全然うまくいかなかった。指示通りにやってるんだけどパスが通らないのか、インストールしても ‘rubygemsをrequireできねーぞゴラ！’ みたいなエラーが出る。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.profile&lt;/code&gt; で記述した &lt;code&gt;GEM_HOME&lt;/code&gt; や &lt;code&gt;RUBY_LIB&lt;/code&gt; のパスは間違ってないと思うんだけど、何回やっても &lt;code&gt;$HOME/lib/&lt;/code&gt; 直下にRubyGems系のファイルが展開されてしまう。これがエラーの原因っぽい。しょうがないので力業で &lt;code&gt;guantlet_rubygems.rb, rbconfig/ rubygems/ rubygems.rb, ubygems.rb&lt;/code&gt; を &lt;code&gt;$HOME/lib/ruby/site_ruby/1.8&lt;/code&gt; に移動させた。その後 &lt;code&gt;source ~/.profile&lt;/code&gt; して適当な場所で &lt;code&gt;gem -v&lt;/code&gt; してみたところ、ちゃんと &lt;code&gt;1.3.5&lt;/code&gt; と表示された。&lt;/p&gt;

&lt;p&gt;蛇足だけど最初、RubyGems 1.3.7をインストールしようとしたら、利用予定地のサーバーのRubyのバージョンが1.8.5なためにインストールできなかった。そういうわけでRubyGemsは1.3.5を入れた。&lt;/p&gt;

&lt;p&gt;あとRubyGemsが入ったからといってシェルで &lt;code&gt;gem install rails&lt;/code&gt; とかやってもプロセスを &lt;code&gt;kill&lt;/code&gt; されるっぽいのでよい子のみなさんは必要な gem は自分のパソコンでインストールしてからアップロードした方がよさげです。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CakePHPはSchemaとかがしょぼいしうんざりする</title>
    <link href="/2010/06/15/im-fed-up-with-cakephp" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/15/im-fed-up-with-cakephp</id>
    <content type="html">&lt;p&gt;CakePHPで作ってたプロジェクトのDBのフィールド名にスペルミスを発見したので（ &lt;code&gt;longitude&lt;/code&gt; を &lt;code&gt;longtitude&lt;/code&gt; としていた）、それを修正するためにDBの構造をいじった。このとき、Cakeは普通にやってたらSchemaとかの概念に触れる機会がないことに気がついて急に怖くなった（ここんとこRailsばっかり触っていたので）。いや、CakePHPにもSchemaの概念はあるんだけど、普通にサイト作るだけだったら世話になる機会がない。というか俺がCakeの底本にしてた公式ガイドにSchemaの項目がない！&lt;/p&gt;

&lt;p&gt;これじゃあgitとかでバージョン管理しててもDBの論理構造が置いてけぼりになって、分散管理とかできないじゃん。SQLite使ってたらバイナリファイルをgitでtrackすればまぁ分散開発でけそうだけど、MySQLとかだったら死ぬよね。&lt;/p&gt;

&lt;p&gt;確かにCakePHPでサイト作るのは楽だったし早かった。ほぼ何もできない状態の自分が数ヶ月でCMS作れたのはCakePHPのおかげなんだけど、CakePHPは何でもテケトーな感じがする。対してRailsは厳格だ。楽するためのフレームワークというより、よりStrictにサイトを構築するためのフレームワークという感じがする。だから慣れるまでは時間がかかる面があるのは否めないんだけど、SchemaにしろTestにしろ、Railsやってて勉強になることはたくさんあります。はやく皆と同じようにrailsの手術を受けたい。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jekyllに変えた</title>
    <link href="/2010/06/14/migrated-to-jekyll" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/14/migrated-to-jekyll</id>
    <content type="html">&lt;p&gt;このブログのCMSをMephistoから&lt;a href=&quot;http://github.com/mojombo/jekyll&quot; title=&quot;mojombo's jekyll at master - GitHub&quot;&gt;jekyll&lt;/a&gt;に変えてみた。&lt;/p&gt;

&lt;p&gt;Mephistoは公式サイトつながらないし、Mephisto使ってた外国のGeek連中がここ一年くらいでこぞってJekyllに移行してるみたいなのでこのビッグウェーブに乗ってみた。&lt;/p&gt;

&lt;h3 id=&quot;jekyll--cms&quot;&gt;Jekyll = 静的CMS&lt;/h3&gt;

&lt;p&gt;しばらくJekyllの使い方が分からなくて格闘してたけど、やっと使い方が分かった。これは静的なCMSであって動的なCMSではない。Movable Typeに似てる。それをGeekなスタイルでやる感じ。&lt;/p&gt;

&lt;h3 id=&quot;ruby&quot;&gt;Rubyが入ってるサーバーはいらない&lt;/h3&gt;

&lt;p&gt;コメント機能とかはないのでサーバーでRubyが動く必要はナッシング。DBも使わないのでMySQLの設定とかSQL分との格闘も必要ナッシング。コメント欄が欲しい場合は &lt;a href=&quot;http://disqus.com/overview/&quot; title=&quot;DISQUS \| Overview&quot;&gt;DISQUS&lt;/a&gt; とかに外注すればOK。&lt;/p&gt;

&lt;p&gt;ちょっと話題がずれるけど、DISQUSって便利そうですよね。他人のブログにコメント書いたあとってそのコントロール権みたいのはブログの持ち主に移行するけど、DISQUSみたいなサービスを利用すればコメントを書いた本人が過去の自分のコメントをトラックしやすくなる。ブログ主にしたってスパム対策とかもやりやすくなる。自前で自分のブログにコメント欄を持つって時代は終わったのかもね。いまはTwitterとかもあるし。&lt;/p&gt;

&lt;h3 id=&quot;mephisto&quot;&gt;Mephistoからの移行について&lt;/h3&gt;

&lt;p&gt;Jekyllのgithubのwikiに移行方法が載っけてあるけど（&lt;a href=&quot;http://wiki.github.com/mojombo/jekyll/blog-migrations&quot; title=&quot;Blog Migrations - jekyll - GitHub&quot;&gt;Blog Migrations - jekyll - GitHub&lt;/a&gt;）、これわかりにくい。というかMephistoをMySQLで運用してないとスクリプトをそのまんまでは利用できない。結果から書くと僕はMephistoはSQLite3で運用してたので移行スクリプトを使えなかった。&lt;/p&gt;

&lt;p&gt;一応MephistoのDBをSQLite3からMySQLに変更してコンバートすることも試してみたけど、DreamHost上では &lt;code&gt;gem install mysqlplus&lt;/code&gt; が &lt;code&gt;sudo&lt;/code&gt; 権限がないために実行できず（なぜかユーザーディレクトリへのインストールもはねられる）、ローカルのMacBook上ではActiveRecordとかその辺でエラーが出て（MephistoはRails 2.2.2以下じゃないと動かないみたい）、Railsのバージョンを下げるとかも試してみたんだけどエラーが出続けるので諦めてしまった。&lt;/p&gt;

&lt;p&gt;そういうわけでして、記事数が16本と少なかったこともあり、ちまちま手書きでMephistoからJekyllに移行しました。&lt;/p&gt;

&lt;p&gt;コメント欄の設置（DISQUSを利用）とかフィードの生成とかカテゴリーの表示とかができてないけど、暇を見つけていじっていく予定です。&lt;/p&gt;

&lt;h3 id=&quot;jekyll&quot;&gt;全般的なJekyllの使用感&lt;/h3&gt;

&lt;p&gt;DBいらずだしシンプルでいいっすわ。XML-RPCとかAPIを使ってどうのこうのとかいった機能はないけど、テキストファイルをしこしこ書いて、 .markdown か .textile みたいな拡張子で保存して、 &lt;code&gt;jekyll&lt;/code&gt; コマンドを実行するだけでhtmlファイルが &lt;code&gt;_site&lt;/code&gt; ディレクトリに生成されて、これをアップロードするだけ。この手順を自動化するシェルスクリプト（&lt;a href=&quot;http://github.com/henrik/henrik.nyh.se/blob/master/tasks/deploy&quot; title=&quot;tasks/deploy at master from henrik's henrik.nyh.se - GitHub&quot;&gt;tasks/deploy at master from henrik’s henrik.nyh.se - GitHub&lt;/a&gt;）も公開されているので、これを使えばectoとか使うのと変わらん感じでお手軽にブログ記事を投稿できます。&lt;/p&gt;

&lt;p&gt;Terminalからコマンドライン打つの好きな人とか、軽くてシンプルなブログを求めてる人にはうってつけだと思いますね。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Rubyいいわー</title>
    <link href="/2010/06/04/i-like-ruby" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/04/i-like-ruby</id>
    <content type="html">&lt;p&gt;irbが素晴らしい！ 惚れた！！ PHPとかクソ！！！&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>RailsのMVC間の命名規約</title>
    <link href="/2010/06/03/rails-name-conventions" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/03/rails-name-conventions</id>
    <content type="html">&lt;p&gt;ポータルシットに前も書いたけど、CakePHPの命名規約ではDBにusersというテーブルがあれば、モデルクラスにUser、コントローラークラスにUsersController、viewsディレクトリにusersっていうのが存在するのを前提とする。これに慣れてしまっているので、Railsのやり方にはなんか慣れない。ModelでPeople、コントローラーでUsersControllerとしてても問題ナッシングなわけだ。むしろRailsではこういうのが普通？ Rails使っててCakeをちょこっと触った人のブログにこういう感想があった。&lt;/p&gt;

&lt;blockquote cite=&quot;http://rails.takeda-soft.jp/blog/show/190&quot; title=&quot;Blog-side CakePHP わかりずらい３点&quot;&gt;
&lt;h3&gt;コントロールとモデルが密すぎる。&lt;/h3&gt;
&lt;p&gt;CakePHPは、コントロール名とモデル名が密接すぎる関連を持っています。PostsControllerというコントロールを作ったら、必ずPostというモデルが存在しないと「モデルが見つからないエラー」になる。&lt;/p&gt;
&lt;cite&gt;&lt;a href=&quot;http://rails.takeda-soft.jp/blog/show/190&quot; title=&quot;Blog-side CakePHP わかりずらい３点&quot;&gt;Blog-side CakePHP わかりずらい３点&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;ふむふむ〜、ナルホディウスですぞ〜！！！&lt;/p&gt;

&lt;p&gt;確かにCakePHPはモデルとコントローラーがガチガチになってて、あるコントローラーが他のモデルクラスにアクセスするときはいちいち&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;$use = array(&amp;quot;Hoge&amp;quot;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とかしなきゃいけなかった。&lt;/p&gt;

&lt;p&gt;最初の頃はモデル、コントローラー、ビューですべてが一対一に対応してるのですんなりMVCの流れを理解できたんだけど、今にしても思えばこういう考え方はすべてのコントローラーに対応するモデル（つまりDBテーブル）がなければならないというしがらみというか束縛を生じさせる。これでは自由な発想で開発できないし、下手をすると一つのコントローラークラスに大量にメソッドを書いてしまったりして、非常にメンテナンス性の良くないコードを量産してしまう公算がある。本当は機能ごとに細かくクラスは分けた方がいいはずだし、メソッドが一つしかないコントローラークラスがあっても良いはずだ。&lt;/p&gt;

&lt;p&gt;そういうわけで、はやくこの辺のCake流の思い込みを排除して皆と同じようにrailsの手術を受けたいです。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Railsはコントローラーのディレクトリにサブディレクトリを作れるのか！</title>
    <link href="/2010/06/03/rails-has-subdirectory-in-controller" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/03/rails-has-subdirectory-in-controller</id>
    <content type="html">&lt;p&gt;なんじゃそれ！ 『Railsによるアジャイル〜』の15章 P239〜P240を読んでいてクリヴィッツテンギョウ！！！  &lt;code&gt;app/controllers/admin/book_controller.rb&lt;/code&gt; ということができるらしい！ んで、そのときのクラス宣言は&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BookController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;となるらしい！ 変態だ！！ ぜったい変態だ！！！&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Railsむずい</title>
    <link href="/2010/06/03/hard-to-learn-rails" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/03/hard-to-learn-rails</id>
    <content type="html">&lt;p&gt;CakePHPはなんも考えなくてもテキトーにやってたらサイトできてたんだけど、Railsはそんな風にはやらしてもらえない。Railsのサイト作んの自体の効率性が悪い訳ではもちろんないんだけど、レールに乗るためにはそれなりに知っとかなきゃいけないことが多い感じ。『Railsによるアジャイル〜』はいま14章まで読んだ。14章はテストの章だったんだけど、初めてテストに触れた感じ。CakePHP 1.2の公式ガイドにもテストについての章はあったけど、後ろの方でおまけみたいな感じだったから飛ばしちゃってた。たまたま先月の頭に買ってた『WEB + DB Press 56』がRubyでのテストを紹介してて、そこを読みながら14章のコードを写経していったけど、わりと早い段階でテストの重要性が説いてあって、アジャイル本はしっかりしてるわと思った。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mephistoから引っ越したい</title>
    <link href="/2010/06/03/feel-like-migrating-from-mephisto" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/06/03/feel-like-migrating-from-mephisto</id>
    <content type="html">&lt;p&gt;なんか &lt;a href=&quot;http://mephistoblog.com/&quot;&gt;Mephistoの公式サイト&lt;/a&gt; 死んでるし、&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; に変えようかなと思ってるんだけど、 &lt;a href=&quot;http://wiki.github.com/mojombo/jekyll/blog-migrations&quot;&gt;移行ガイド&lt;/a&gt; の通りにやってもうまくいかない。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>たのしいネットストーキング with Ruby</title>
    <link href="/2010/05/18/happy-netstalking-with-ruby" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/18/happy-netstalking-with-ruby</id>
    <content type="html">&lt;p&gt;この前大阪で第二回アメ村ブルゾンの会をやったんですけど、そこで日夜&lt;del&gt;ネットストーキング&lt;/del&gt;プログラミングにいそしんでおられる皆さんとお会いして、TwitterのStreaming APIの使い方を教えてもらいました。なんか自分でやろうとしてたんだけど、全然見当違いなところを見ていたみたいで、僕もStreaming APIでネットストーキングできるようになりました。pokutunaさんにもらったコードと “Twitter Streaming APIをRubyで試してみる - しばそんノート”:http://d.hatena.ne.jp/shibason/20090816/1250405491 を参考に、以下のような感じにしてみました。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# coding: utf-8&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;net/http&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;uri&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;morygonzalez&amp;#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;***&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://chirpstream.twitter.com/2b/user.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basic_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Response is not chunked&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunked?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_body&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#空行は無視&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#eventを含まないものは無視&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;source&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;target_object&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;target_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;target_object&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;target_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;screen_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -&amp;amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;screen_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;screen_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -&amp;amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;screen_name&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;lt;-----!!!! Timeout::Error!!!!-----&amp;amp;gt;&amp;quot;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;retry&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;教えてもらったコードではTweetの内容を垂れ流しにするやつだったんですけど、自分でちょこっといじってTweet以外のステータスを表示するようにしてみた。しかしなんか調子悪いっぽくて、完全にはStreamを取れてないっぽいです。&lt;/p&gt;

&lt;p&gt;でもまぁ一歩前進したことは確か。Rubyがんばるぜ。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>DreamHostでRailsアプリケーションを再起動</title>
    <link href="/2010/05/11/rails-app-on-dreamhost" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/11/rails-app-on-dreamhost</id>
    <content type="html">&lt;p&gt;レンタルサーバーみたいな共有サーバーとか &lt;code&gt;sudo&lt;/code&gt; 権限のないサーバーで動かしてるRailsアプリケーションを再起動したくなることがある。でもApacheをリスタートする権限がない。じゃあどうするかとググっていたらこういう記事にたどり着いた。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To restart your rails app do a “ps x” to get the pid of your dispatch.fcgi process(let’s say it’s 1234) then do a “kill 1234”. This will kill the running process and a new one will be automatically spawned and you should now see your changes. 
&lt;cite&gt;&lt;a href=&quot;http://forum.dreamhosters.com/3rdparty/77334-How-do-I-restart-rails-app.htm&quot;&gt;How do I restart rails app? - DreamHost Forum&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要するに &lt;code&gt;ps x&lt;/code&gt; でRailsアプリケーションのプロセスIDを調べ、 &lt;code&gt;kill #pid&lt;/code&gt; しちゃうというわけ。 &lt;code&gt;kill&lt;/code&gt; できんのかなと半信半疑だったけどちゃんとできた。&lt;/p&gt;

&lt;p&gt;他のレンタルサーバーには当てはまらないかもしれないけどメモっときます。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CakePHP 1.2.xのRSSヘルパーはわかりにくい</title>
    <link href="/2010/05/11/cakephp-rss-helper-sucks" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/11/cakephp-rss-helper-sucks</id>
    <content type="html">&lt;p&gt;ちょっとCakePHPで作ってるサイトでRSSフィードを配信したいと思ったのでやってみたんだけど、思いの外面倒くさくてびっくりした。『RailsによるアジャイルWebアプリケーション開発』を読みながらRails 2.3.5でRSSフィード作るときは結構簡単だった気がするので、正直これはないわと思った。&lt;/p&gt;

&lt;p&gt;『Railsによる〜』で作ってるデモプロジェクトのdpeotのコードを見てみると、RSSを配信するときはControllerに以下のように記述し、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# index.html.erb&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;config/routes.rb&lt;/code&gt; に&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:controller/:action/:id.:format&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と書いたあと、RSS用のViewを用意してやるだけだ。ものすごくシンプルで簡単だった。&lt;/p&gt;

&lt;p&gt;CakePHPで同じことをやるためには以下の手順が必要。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://book.cakephp.org/view/483/Creating-an-RSS-feed-with-the-RssHelper&quot;&gt;Creating an RSS feed with the RssHelper :: RSS :: Core Helpers :: The Manual :: 1.2 Collection :: The Cookbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちょっと面倒くさすぎてやる気にならなかった。どうせいま僕が作ってるサイトなんてRSSリーダー使うような人が見るサイトじゃないし、フィード配信機能の実装はそんなにプライオリティ高くないので他にやることがなくてどうしようもなく暇なときにでもやろう。&lt;/p&gt;

&lt;p&gt;Railsは最初のとっかかりのハードルは高いけど、使い方を覚えていったらやっぱりCakePHPとかよりも全然簡単かつ高速に開発できる気がする。レールに乗ってる感強い。このMephistoの設置もすごく楽だった。ただTerminalを使い慣れた人や、サーバーにSSHでアクセスできる環境じゃないとRailsアプリケーションを使うのは難しい。CakePHPは反面、全部FTPでアップロードすれば良いのでサーバーに標準的な構成でPHPがインストールされてりゃ環境構築でつまずくことはない。どっちをとるかって話ですよね。&lt;/p&gt;

&lt;p&gt;僕はファッションの観点からRailsを選びたい。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>MVCのViewにどこまで書くか</title>
    <link href="/2010/05/08/to-what-extent-write-codes-in-mvc" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/08/to-what-extent-write-codes-in-mvc</id>
    <content type="html">&lt;p&gt;『Railsによるアジャイル〜』とかのコードはViewの部分がスゲーシンプルで、ロジックがほとんど書いてない。これに慣れると、CakePHPに戻って自分が作ってるウェブアプリを見たときに、Viewに結構ロジックが書いてあって愕然とする。例えばフラグをたてて条件にマッチすれば日付を表示し、マッチしなければ表示しないとかしたいとするじゃないですか。Controllerでそういう設定できなくないけど長くなる。Viewの中に書いてしまったら数行で済むし。&lt;/p&gt;

&lt;p&gt;だから僕の作ってるCakePHPアプリはMVCとか名ばかりでViewのコード超きたない。入れ子になったif文がたくさんあるし、正規表現で日付の書式変更とかまでやってる。さすがに関数とかは定義してないですけどね。&lt;/p&gt;

&lt;p&gt;そもそもCake FoundationのCakeBookも結構Viewにロジックが書いてあったりする。というかかなりハードに書いてある。CakePHPってViewとロジックを分離させるのが難しいのかな。&lt;/p&gt;

&lt;p&gt;加えて、Controllerも結構ひどいことになってる。本当はModelに書くべきことを結構Controllerに書いている気がしないではない。サイト検索のためのメソッドとか200行近くあるし、joinとかしまくり。&lt;/p&gt;

&lt;p&gt;MVCでロジックとヴューを分離することでデザイナーがViewを触れるようになって分業が進むかもとか思ってたけど、到底そんな状況にないですね。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Gitのbranchの使い方</title>
    <link href="/2010/05/07/git-branch-usage" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/07/git-branch-usage</id>
    <content type="html">&lt;p&gt;Gitでbranchの効率的な使い方みたいのがよくわからない。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;実験的な機能をつけたい&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ブランチを分ける（例えば開発用に alternate というブランチを作る）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;開発する&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;開発完了後、 master にマージ&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;みたいな感じかなと思ってた。&lt;/p&gt;

&lt;p&gt;しかし実際に運用してみると、実験的な機能の実装の他に、日常的にmasterでコードの改良みたいな作業があり、alternateで開発が完了した後にmasterにマージしたら多分コンフリクト起こりまくりになるような気がしてきた。&lt;/p&gt;

&lt;p&gt;それで日常メンテみたいな作業はmasterブランチで行い、それをalternateにマージするという手順をとってる。正しい開発方法かどうかはわからないけど、一応alternateブランチもmasterの最新の変更を追跡できる。んでalternateではしこしこ開発を続けて、開発完了時にmasterにマージしても多分派手なコンフリクトは起こらないんじゃないかと思ってますがどうなんでしょう。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>IE6, 7, 8でJavaScriptがうまく動いてくれない</title>
    <link href="/2010/05/07/fuck-ie" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/07/fuck-ie</id>
    <content type="html">&lt;p&gt;こういうコード書いてます。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAttrName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//	items = document.getElementsByClassName(&amp;#39;item&amp;#39;);&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li.item&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;slow&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	var keywordList = items[i].getElementsByClassName(&amp;#39;keyword-list&amp;#39;);&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywordList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.keyword-list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywordList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//var keywords = keywordList[j].getElementsByTagName(&amp;#39;li&amp;#39;);&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywordList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;slow&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;getCurAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCurAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curAttr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#keySelector li a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;current-keyword&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;current-keyword&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;やりたいことは以下のような感じ。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;onclickで &lt;code&gt;attrObj&lt;/code&gt; が &lt;code&gt;getAttrName&lt;/code&gt; に渡される&lt;/li&gt;
  &lt;li&gt;クリックされた文字列を &lt;code&gt;attrName&lt;/code&gt; に格納&lt;/li&gt;
  &lt;li&gt;すべての &lt;code&gt;item&lt;/code&gt; をjQueryを使って非表示&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;item&lt;/code&gt; の中の &lt;code&gt;ul.keyword-list li&lt;/code&gt; 内のテキストに一致したらjQueryで表示&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Firefox/Safari/Operaでは問題なく動く。しかしIEが全滅。最初は &lt;code&gt;getElementByClassName&lt;/code&gt; とか使ってるからかと思ってたけど、その辺のやつをコメントアウトしてjQueryセレクタを使ってオブジェクトを取得するようにしてもダメ。なんかループの処理とかが怪しいんじゃないかと思ってる。ループ処理もjQueryに書き換えようかな。&lt;/p&gt;

&lt;p&gt;ブラウザ間の挙動の違いを吸収してくれるライブラリはまじですごいしありがたいのですが、結局IEちゃんでは動かせない。歯がゆいな。&lt;/p&gt;

&lt;p&gt;サーバーサイドで実装する方法もないではないけど、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;いじる部分が広範囲になりめんどい（新たなバグが発生するかも）&lt;/li&gt;
  &lt;li&gt;大した機能じゃないのに大手術したくない&lt;/li&gt;
  &lt;li&gt;ずっとPHPばっかり触ってるのはつまらん&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;などという理由により期限ぎりぎりまでJavaScriptで粘ってみたいです。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;追記&lt;/h3&gt;

&lt;p&gt;“Twitterでcxxさんに教えてもらった”:http://twitter.com/cxx/status/13545498622 んだけど、IEにはtextContetはないそうです。恥ずかしい。&lt;/p&gt;

&lt;p&gt;そういうわけで&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywordList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;li a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywordList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;とし、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;を&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;にしてみたところ、ばっちりIEで動くようになった。&lt;/p&gt;

&lt;p&gt;cxxさんありがとうございます。今度焼き肉デートしましょう。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ポータルシットにキャッシュを効かせた</title>
    <link href="/2010/05/03/portalshit-cached" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/03/portalshit-cached</id>
    <content type="html">&lt;p&gt;ポータルシットがクソ重くて、なんか対策ないかなーとか仕事をさぼりながらときどき調べてた。&lt;/p&gt;

&lt;p&gt;おおよその原因は掴んでいた。それはアクセス解析プラグイン。MySQLのデータ容量がでかくなるとページの表示が遅くなる。アクセス解析プラグインを無効にした状態でページの表示速度はだいたい0.05秒くらいなんだけど、アクセス解析プラグインを有効にすると表示速度は1秒台とかまで悪化する。アクセス解析に使うテーブル（ &lt;code&gt;p_page_analyze&lt;/code&gt; ）をDROPするとまた速さが回復するので時々空にしていた。&lt;/p&gt;

&lt;p&gt;しかしよくよくアクセス解析プラグインのコードを覗いてみると、ヴュー部分で使っていないSQLクエリが発行されており、このせいでクエリの回数が必要な回数の何倍にもなっていた。ポータルシットのアクセスなんて大したことないんだから、DBのサイズがちょっとでかくなっただけでこんなに遅くなるはずがないのだ。&lt;/p&gt;

&lt;p&gt;そういうわけで不必要なクエリのトリガーになるコードをコメントアウトしてみた。すると1秒台だった表示速度は0.2秒から0.5秒程度に収まるようになった。しかしそれでもなんか遅く感じる。&lt;/p&gt;

&lt;p&gt;それでキャッシュを効かせることにしてみた。使ったのはPecl APC。DreamHostはなんでもやらせてくれるのでほんと助かる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://wiki.dreamhost.com/Pecl_APC&quot;&gt;Pecl APC - DreamHost&lt;/a&gt; を見ながらシェルスクリプトをコピペして走らせ、php.iniにAPCの設定を書き加えて終了。僕はPHPのバージョンを5.3.1に上げているのでコピペしたシェルスクリプトのまんまではきちんと入らなかった。最新版のAPC（APC-3.1.3p1）にバージョン情報を書き換えてインストールしたところうまくいった。またDreamHost Wikiではキャッシュファイルのパスが &lt;code&gt;/home/username/tmp/apc.*XXXXXX*&lt;/code&gt; だったり &lt;code&gt;/home/username/tmp/apc.*XXXXX*&lt;/code&gt; だったりばらついてるけど、Xの数は6個じゃないと500エラーが出るのでご注意を。&lt;/p&gt;

&lt;p&gt;キャッシュを効かせて見た結果、フッターのPage Generationはあまり変化がないが、体感速度は十分に速くなった。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CakePHP 1.3</title>
    <link href="/2010/05/01/cakephp13" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/05/01/cakephp13</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://bakery.cakephp.org/articles/view/announcing-cakephp-1-3-0-stable&quot;&gt;CakePHP 1.3のStableがリリース&lt;/a&gt; された。 &lt;a href=&quot;http://book.cakephp.org/view/1561/Migrating-from-CakePHP-1-2-to-1-3&quot;&gt;JavascriptヘルパーとかAjaxヘルパーが非推奨になってる&lt;/a&gt; 。かわりにHtmlヘルパーのjsメソッドを使うらしい。 &lt;code&gt;$html-&amp;gt;js('')&lt;/code&gt; みたいな感じかな。で、Ajax系の処理はjQueryがデフォルトのライブラリになったらしい。Rails 3.0もprotorype.jsに別れを告げたらしいし、自分がJavaScriptのライブラリで遊び始めた頃はjQueryが全盛だったのでいまからprototype.jsの使い方勉強するのかったるかったし、jQuery簡単だしこの進化は大歓迎です。&lt;/p&gt;

&lt;p&gt;JavascriptヘルパーとAjaxヘルパーが非推奨になった件については、わざわざ別のヘルパーにせんでもいいよなー、という印象は確かに持ってた。Htmlをいじるメソッドは一つのヘルパークラスにまとめてしまった方がすっきりする。1.2.xのときはAjaxヘルパーが使いづらすぎて結局jQueryでAjaxすることもあったし、あまり存在意義を見いだせなかったので良かったんじゃないでしょうか。&lt;/p&gt;

&lt;p&gt;でも既存のプロジェクトの1.3への移行はめんどくさそうなのでたぶんやんない気がする。新しくCakePHPでなんか作るときは使ってみようと思います。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Google Analytics Pluginが動かない</title>
    <link href="/2010/04/22/google-analytics-plugin" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/04/22/google-analytics-plugin</id>
    <content type="html">&lt;p&gt;MephistoでGoogle Analytics使おうと思ってググったら &lt;a href=&quot;http://www.artweb-design.de/projects/ruby-on-rails-plugin-google-analytics&quot;&gt;Ruby on Rails Plugin: Google Analytics (blue egg edition) - artweb design&lt;/a&gt; というのが出てきたので、早速インストールしてみたんだけど動いていないっぽい。&lt;/p&gt;

&lt;p&gt;Mephistoは「rails blog」でググって一番上に出てきたので深く考えもせずにインストールしてしまったんだけど、一年近くバージョンアップされてないし、いまはあんまり活発に開発が行われてるわけじゃないっぽいな。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;追記&lt;/h3&gt;

&lt;p&gt;一晩寝て起きたら動いてた。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CakePHPのMedia Pluginは神だけど設置が面倒</title>
    <link href="/2010/04/22/cakephp-mediaplugin" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/04/22/cakephp-mediaplugin</id>
    <content type="html">&lt;p&gt;CakePHPには &lt;a href=&quot;http://github.com/davidpersson/media&quot;&gt;Media Plugin&lt;/a&gt; というのがあって、これがすこぶる便利。画像や文書の他に、動画ファイルまで扱うことができる。PHPではファイルアップロードのところにセキュリティリスクが潜んでいそうなイメージだし、自分のような素人に毛が生えたようなレベルの人間は素直にこういう便利なプラグインを使った方がいい。&lt;/p&gt;

&lt;p&gt;しかしこのMedia Plugin、設置が少々面倒だ。情報も英語のものも含めて少ない。僕は二つのプロジェクトでこのMedia Pluginを使ったけど、とても設置に苦労した。はまるポイントはいくつかあるんだけど、今日はDBについて書いておこうと思う。&lt;/p&gt;

&lt;p&gt;Media Pluginは &lt;code&gt;attachments&lt;/code&gt; というテーブルをつくり、ここにファイルのメタデータを格納していく。これはアプリケーションのルート（ &lt;code&gt;APP&lt;/code&gt; ディレクトリ）で &lt;code&gt;cake media init&lt;/code&gt; というコマンドをTerminalで打ってやると（ただし &lt;code&gt;/cake/console&lt;/code&gt; にパスを通しておく必要あり）、Bakeのときのような画面が出てきて初期設定をやってくれる（ &lt;code&gt;app/config/database.php&lt;/code&gt; の情報にあわせてテーブルも作ってくれる）。しかしCakePHPのデフォルトDBがMySQLであるためMedia PluginもMySQLを想定しているのか、 &lt;code&gt;app/plugins/media/config/sql/media.sql&lt;/code&gt; のSQL文を単純に実行してしまうと不具合が生じる。実は僕はここで結構はまってた。僕は全部のプロジェクトでSQLiteを使っているので、単純にこのSQLを実行すると、 &lt;code&gt;attachments.id&lt;/code&gt; のデータ型が &lt;code&gt;INT(10)&lt;/code&gt; とかになってしまい、エラーに遭遇し続けることになってしまった。SQLiteの場合、idカラムのデータ型は &lt;code&gt;INTEGER&lt;/code&gt; でなければならないのだ。&lt;/p&gt;

&lt;p&gt;これはMedia Pluginに限らないけど、Convention Over Configuration なフレームワークを使うときは、DBのテーブル名に注意をはらわなければならない。否、先にも書いたとおりそれだけでは不十分で、さらにカラムのデータ型とかも規約に沿ったものにしないと、原因不明の謎のエラーに遭遇して開発が停滞する。おっちょこちょいな人（僕も含めて）はその辺の基本的な部分をおろそかにしない方がいいと思った&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mephistoで技術ブログをやることにした</title>
    <link href="/2010/04/22/blogging-with-mephisto" />
    <updated>Liquid error: undefined method `xmlschema' for nil:NilClass</updated>
    <id>http://tech.portalshit.net//2010/04/22/blogging-with-mephisto</id>
    <content type="html">&lt;p&gt;なんかTwitterで「最近のポータルシット変わったよね…」とかいう意見を目にするようになったので、パソコンネタだけ隔離して別にブログを始めることにした。使っているCMSはMephisto。Railsの勉強になるかと思って。早速DreamhostへMephistoをインストールしていて躓いてしまったのでちょこっとメモ。&lt;/p&gt;

&lt;p&gt;とりあえず tech.portalshit.net というサブドメインを用意し、DreamhostのパネルでPassengerのセットアップ。その後SSHでサーバーに接続し、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;    $ git clone git://github.com/emk/mephisto.git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;してgithubからプロジェクトをclone。&lt;/p&gt;

&lt;p&gt;Mephistoのインストールにはいくつかgemが必要。Dreamhostには結構たくさんgemがインストールしてあるんだけど、いくつか足りないものがあった。とりあえず設置ディレクトリのルートで&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;    $ rake gems:install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と打ってみたところ、nokogiriとそれに依存するbrynary-webratが入らなかった。原因を調べてみたところ、xsltのライブラリをダウンロードして、&lt;code&gt;gem install&lt;/code&gt; するときにパスを指定してあげる必要があるらしい。xsltのライブラリ自体はPHP5をカスタムインストールしたときに入れてあるので、以下のオプションでインストールした。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;    $ gem install nokogiri \&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    --with-xslt-include=/home/morygonzalez/php5/include/ \&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    --with-xslt-lib=/home/morygonzalez/php5/lib/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;無事インストール成功。その後もう一回 &lt;code&gt;rake gems:install&lt;/code&gt; を実行してbrynary-webratも入り、管理ページにアクセスしてみると今度はPassengerのエラーが。これは単純にdatabase.ymlに &lt;code&gt;development:&lt;/code&gt; のDB環境しか記述していなかったこと、 &lt;code&gt;rake db:bootstrap&lt;/code&gt; のときに &lt;code&gt;RAILS_ENV=production&lt;/code&gt; をつけていなかったことが原因だった。そういうわけでdatabase.ymlに &lt;code&gt;production:&lt;/code&gt; の設定（sqlite3を使用）を書き、&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;    $ rake db:bootstrap RAILS_ENV=production&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ですべてのインストール作業完了。いまこうして動いております。&lt;/p&gt;

&lt;p&gt;今後はここにCakePHPやRails、JavaScript関連のことを書いていこうと思います。できれば一日一ポスト、その日に学んだことを書いていきたいです。&lt;/p&gt;
</content>
  </entry>
  

</feed>